/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KatalogEintrag from '../model/KatalogEintrag';
import NationalitaetenKatalogEintrag from '../model/NationalitaetenKatalogEintrag';
import OrtKatalogEintrag from '../model/OrtKatalogEintrag';
import OrtsteilKatalogEintrag from '../model/OrtsteilKatalogEintrag';
import ReligionKatalogEintrag from '../model/ReligionKatalogEintrag';

/**
* Kataloge service.
* @module api/KatalogeApi
* @version 1.0.0
*/
export default class KatalogeApi {

    /**
    * Constructs a new KatalogeApi. 
    * @alias module:api/KatalogeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Gibt eine Übersicht der Haltestellen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Haltestellen unter Angabe der ID, eines Kürzels und der textuellen Beschreibung sowie der Information, ob der Eintrag in der Anwendung sichtbar bzw. änderbar sein soll, undgibt diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KatalogEintrag>} and HTTP response
     */
    getKatalogHaltestellenWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getKatalogHaltestellen");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/haltestellen/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht der Haltestellen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Haltestellen unter Angabe der ID, eines Kürzels und der textuellen Beschreibung sowie der Information, ob der Eintrag in der Anwendung sichtbar bzw. änderbar sein soll, undgibt diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KatalogEintrag>}
     */
    getKatalogHaltestellen(schema) {
      return this.getKatalogHaltestellenWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht der Verkehrssprachen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Verkehrssprachen unter Angabe der ID, eines Kürzels und der textuellen Beschreibung sowie der Information, ob der Eintrag in der Anwendung sichtbar bzw. änderbar sein soll, undgibt diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KatalogEintrag>} and HTTP response
     */
    getKatalogVerkehrsspracheWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getKatalogVerkehrssprache");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/verkehrsprachen/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht der Verkehrssprachen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Verkehrssprachen unter Angabe der ID, eines Kürzels und der textuellen Beschreibung sowie der Information, ob der Eintrag in der Anwendung sichtbar bzw. änderbar sein soll, undgibt diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KatalogEintrag>}
     */
    getKatalogVerkehrssprache(schema) {
      return this.getKatalogVerkehrsspracheWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht aller Nationalitäten im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Nationalitäten unter Angabe der ID, des Landes, der Staatsangehörigkeit, einem Statistik-Kürzel, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NationalitaetenKatalogEintrag>} and HTTP response
     */
    getNationaelitaetenKatalogWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getNationaelitaetenKatalog");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NationalitaetenKatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/nationalitaet/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht aller Nationalitäten im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Nationalitäten unter Angabe der ID, des Landes, der Staatsangehörigkeit, einem Statistik-Kürzel, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NationalitaetenKatalogEintrag>}
     */
    getNationaelitaetenKatalog(schema) {
      return this.getNationaelitaetenKatalogWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht alle Orte im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Orte unter Angabe der ID, der PLZ, des Ortes, ggf. des Kreises, dem Bundesland, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrtKatalogEintrag>} and HTTP response
     */
    getOrtKatalogWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getOrtKatalog");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrtKatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/ort/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht alle Orte im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Orte unter Angabe der ID, der PLZ, des Ortes, ggf. des Kreises, dem Bundesland, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrtKatalogEintrag>}
     */
    getOrtKatalog(schema) {
      return this.getOrtKatalogWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht aller Ortsteile im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Ortsteile unter Angabe der ID, der zugehörigenOrt-ID, dem Namen des Ortsteils, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/OrtsteilKatalogEintrag>} and HTTP response
     */
    getOrtsteilKatalogWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getOrtsteilKatalog");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrtsteilKatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/ortsteil/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht aller Ortsteile im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Ortsteile unter Angabe der ID, der zugehörigenOrt-ID, dem Namen des Ortsteils, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/OrtsteilKatalogEintrag>}
     */
    getOrtsteilKatalog(schema) {
      return this.getOrtsteilKatalogWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht alle Religionen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Religionen unter Angabe der ID, der Bezeichnung sowie der Bezeichnung, welche auf dem Zeugnis erscheint, einem Statistik-Kürzel, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReligionKatalogEintrag>} and HTTP response
     */
    getReligionKatalogWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getReligionKatalog");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReligionKatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/katalog/religion/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht alle Religionen im Katalog zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Religionen unter Angabe der ID, der Bezeichnung sowie der Bezeichnung, welche auf dem Zeugnis erscheint, einem Statistik-Kürzel, einer Sortierreihenfolge und ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReligionKatalogEintrag>}
     */
    getReligionKatalog(schema) {
      return this.getReligionKatalogWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
