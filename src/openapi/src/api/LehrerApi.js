/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LehrerKatalogAbgangsgrundEintrag from '../model/LehrerKatalogAbgangsgrundEintrag';
import LehrerKatalogBeschaeftigungsartEintrag from '../model/LehrerKatalogBeschaeftigungsartEintrag';
import LehrerKatalogEinsatzstatusEintrag from '../model/LehrerKatalogEinsatzstatusEintrag';
import LehrerKatalogLeitungsfunktionEintrag from '../model/LehrerKatalogLeitungsfunktionEintrag';
import LehrerKatalogRechtsverhaeltnisEintrag from '../model/LehrerKatalogRechtsverhaeltnisEintrag';
import LehrerKatalogZugangsgrundEintrag from '../model/LehrerKatalogZugangsgrundEintrag';
import LehrerPersonaldaten from '../model/LehrerPersonaldaten';
import LehrerStammdaten from '../model/LehrerStammdaten';
import LehrerlisteEintrag from '../model/LehrerlisteEintrag';

/**
* Lehrer service.
* @module api/LehrerApi
* @version 1.0.0
*/
export default class LehrerApi {

    /**
    * Constructs a new LehrerApi. 
    * @alias module:api/LehrerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Gibt den Katalog der Lehrerabgangsgründe zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerabgangsgründe unter Angabe der ID, der Bezeichnung und des Statistikschlüssels. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogAbgangsgrundEintrag>} and HTTP response
     */
    getLehrerKatalogAbgangsgrundWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogAbgangsgrund");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogAbgangsgrundEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/abgangsgrund', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Lehrerabgangsgründe zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerabgangsgründe unter Angabe der ID, der Bezeichnung und des Statistikschlüssels. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogAbgangsgrundEintrag>}
     */
    getLehrerKatalogAbgangsgrund(schema) {
      return this.getLehrerKatalogAbgangsgrundWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog der Beschäftigungsarten zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Beschäftigungsarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogBeschaeftigungsartEintrag>} and HTTP response
     */
    getLehrerKatalogBeschaeftigungsartWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogBeschaeftigungsart");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogBeschaeftigungsartEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/beschaeftigungsart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Beschäftigungsarten zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Beschäftigungsarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogBeschaeftigungsartEintrag>}
     */
    getLehrerKatalogBeschaeftigungsart(schema) {
      return this.getLehrerKatalogBeschaeftigungsartWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog des Einsatzstatus zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Einsatzstatusarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogEinsatzstatusEintrag>} and HTTP response
     */
    getLehrerKatalogEinsatzstatusWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogEinsatzstatus");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogEinsatzstatusEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/einsatzstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog des Einsatzstatus zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Einsatzstatusarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogEinsatzstatusEintrag>}
     */
    getLehrerKatalogEinsatzstatus(schema) {
      return this.getLehrerKatalogEinsatzstatusWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog der Lehrerleitungsfunktionen zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerleitungsfunktionen unter Angabe der ID und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogLeitungsfunktionEintrag>} and HTTP response
     */
    getLehrerKatalogLeitungsfunktionWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogLeitungsfunktion");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogLeitungsfunktionEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/leitungsfunktion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Lehrerleitungsfunktionen zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerleitungsfunktionen unter Angabe der ID und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogLeitungsfunktionEintrag>}
     */
    getLehrerKatalogLeitungsfunktion(schema) {
      return this.getLehrerKatalogLeitungsfunktionWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog des Rechtsverhältnisse zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Rechtsverhältnisse unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogRechtsverhaeltnisEintrag>} and HTTP response
     */
    getLehrerKatalogRechtsverhaeltnisWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogRechtsverhaeltnis");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogRechtsverhaeltnisEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/rechtsverhaeltnis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog des Rechtsverhältnisse zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Rechtsverhältnisse unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogRechtsverhaeltnisEintrag>}
     */
    getLehrerKatalogRechtsverhaeltnis(schema) {
      return this.getLehrerKatalogRechtsverhaeltnisWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog der Lehrerzugangsgründe zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerzugangsgründe unter Angabe der ID, der Bezeichnung und des Statistikschlüssels. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerKatalogZugangsgrundEintrag>} and HTTP response
     */
    getLehrerKatalogZugangsgrundWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerKatalogZugangsgrund");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerKatalogZugangsgrundEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/lehrer/katalog/zugangsgrund', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Lehrerzugangsgründe zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Lehrerzugangsgründe unter Angabe der ID, der Bezeichnung und des Statistikschlüssels. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerKatalogZugangsgrundEintrag>}
     */
    getLehrerKatalogZugangsgrund(schema) {
      return this.getLehrerKatalogZugangsgrundWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine Übersicht von allen Lehrern zurück.
     * Erstellt eine Liste aller in der Datenbank vorhanden Lehrer unter Angabe der ID, des Kürzels, des Vor- und Nachnamens, der sog. Personentyps, einer Sortierreihenfolge, ob sie in der Anwendung sichtbar bzw. änderbar sein sollen sowie ob sie für die Schulstatistik relevant sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerdaten besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LehrerlisteEintrag>} and HTTP response
     */
    getLehrerListeWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerListe");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LehrerlisteEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine Übersicht von allen Lehrern zurück.
     * Erstellt eine Liste aller in der Datenbank vorhanden Lehrer unter Angabe der ID, des Kürzels, des Vor- und Nachnamens, der sog. Personentyps, einer Sortierreihenfolge, ob sie in der Anwendung sichtbar bzw. änderbar sein sollen sowie ob sie für die Schulstatistik relevant sein sollen. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerdaten besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LehrerlisteEintrag>}
     */
    getLehrerListe(schema) {
      return this.getLehrerListeWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Liefert zu der ID des Lehrer die zugehörigen Personaldaten.
     * Liest die Personaldaten des Lehrers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LehrerPersonaldaten} and HTTP response
     */
    getLehrerPersonaldatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerPersonaldaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLehrerPersonaldaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LehrerPersonaldaten;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/personaldaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Lehrer die zugehörigen Personaldaten.
     * Liest die Personaldaten des Lehrers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LehrerPersonaldaten}
     */
    getLehrerPersonaldaten(schema, id) {
      return this.getLehrerPersonaldatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Liefert zu der ID des Lehrer die zugehörigen Stammdaten.
     * Liest die Stammdaten des Lehrers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LehrerStammdaten} and HTTP response
     */
    getLehrerStammdatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getLehrerStammdaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLehrerStammdaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LehrerStammdaten;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/stammdaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Lehrer die zugehörigen Stammdaten.
     * Liest die Stammdaten des Lehrers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LehrerStammdaten}
     */
    getLehrerStammdaten(schema, id) {
      return this.getLehrerStammdatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Abgangsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Abgangsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Abgangsdatum des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerAbgangsdatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerAbgangsdatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerAbgangsdatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerAbgangsdatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/abgangsdatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Abgangsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Abgangsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Abgangsdatum des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerAbgangsdatum(schema, id, body) {
      return this.setLehrerAbgangsdatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Abgangsgrund des Lehrers mit der angebebenen ID.
     * Schreibt den Abgangsgrund des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Abgangsgrund des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerAbgangsgrundWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerAbgangsgrund");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerAbgangsgrund");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerAbgangsgrund");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/abgangsgrund', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Abgangsgrund des Lehrers mit der angebebenen ID.
     * Schreibt den Abgangsgrund des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Abgangsgrund des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerAbgangsgrund(schema, id, body) {
      return this.setLehrerAbgangsgrundWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Amtsbezeichnung des Lehrers mit der angebebenen ID.
     * Schreibt die Amtsbezeichnung des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag zur Amtsbezeichnung entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Amtsbezeichnung des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerAmtsbezeichnungWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerAmtsbezeichnung");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerAmtsbezeichnung");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/amtsbezeichnung', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Amtsbezeichnung des Lehrers mit der angebebenen ID.
     * Schreibt die Amtsbezeichnung des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag zur Amtsbezeichnung entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Amtsbezeichnung des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerAmtsbezeichnung(schema, id, opts) {
      return this.setLehrerAmtsbezeichnungWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Anrede für den Lehrer mit der angebebenen ID.
     * Schreibt die Anrede für den Lehrer mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Anrede für den Lehrer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerAnredeWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerAnrede");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerAnrede");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/anrede', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Anrede für den Lehrer mit der angebebenen ID.
     * Schreibt die Anrede für den Lehrer mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Anrede für den Lehrer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerAnrede(schema, id, opts) {
      return this.setLehrerAnredeWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Beschäftigungsart des Lehrers mit der angebebenen ID.
     * Schreibt die Beschäftigungsart des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Beschäftigungsart des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerBeschaeftigungsartWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerBeschaeftigungsart");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerBeschaeftigungsart");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerBeschaeftigungsart");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/beschaeftigungsart', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Beschäftigungsart des Lehrers mit der angebebenen ID.
     * Schreibt die Beschäftigungsart des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Beschäftigungsart des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerBeschaeftigungsart(schema, id, body) {
      return this.setLehrerBeschaeftigungsartWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Einsatzstatus des Lehrers mit der angebebenen ID.
     * Schreibt den Einsatzstatus des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Einsatzstatus des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerEinsatzstatusWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerEinsatzstatus");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerEinsatzstatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerEinsatzstatus");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/einsatzstatus', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Einsatzstatus des Lehrers mit der angebebenen ID.
     * Schreibt den Einsatzstatus des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Einsatzstatus des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerEinsatzstatus(schema, id, body) {
      return this.setLehrerEinsatzstatusWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die dienstliche E-Mail-Adresse des Lehrers mit der angebebenen ID.
     * Schreibt die dienstliche E-Mail-Adresse des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die dienstliche E-Mail-Adresse des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerEmailDienstlichWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerEmailDienstlich");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerEmailDienstlich");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/email_dienst', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die dienstliche E-Mail-Adresse des Lehrers mit der angebebenen ID.
     * Schreibt die dienstliche E-Mail-Adresse des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die dienstliche E-Mail-Adresse des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerEmailDienstlich(schema, id, opts) {
      return this.setLehrerEmailDienstlichWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die private E-Mail-Adresse des Lehrers mit der angebebenen ID.
     * Schreibt die private E-Mail-Adresse des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die private E-Mail-Adresse des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerEmailPrivatWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerEmailPrivat");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerEmailPrivat");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/email_privat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die private E-Mail-Adresse des Lehrers mit der angebebenen ID.
     * Schreibt die private E-Mail-Adresse des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die private E-Mail-Adresse des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerEmailPrivat(schema, id, opts) {
      return this.setLehrerEmailPrivatWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Base64-JPG-kodierte Foto des Lehrers mit der angebebenen ID.
     * Schreibt das Base64-JPG-kodierte Foto des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Base64-JPG-kodierte Foto des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerFotoWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerFoto");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerFoto");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerFoto");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/foto', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Base64-JPG-kodierte Foto des Lehrers mit der angebebenen ID.
     * Schreibt das Base64-JPG-kodierte Foto des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Base64-JPG-kodierte Foto des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerFoto(schema, id, body) {
      return this.setLehrerFotoWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geburtsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Geburtsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geburtsdatum Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerGeburtsdatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerGeburtsdatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerGeburtsdatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerGeburtsdatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/geburtsdatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geburtsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Geburtsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geburtsdatum Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerGeburtsdatum(schema, id, body) {
      return this.setLehrerGeburtsdatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geschlecht des Lehrers mit der angebebenen ID.
     * Schreibt das Geschlecht des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geschlecht des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerGeschlechtWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerGeschlecht");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerGeschlecht");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerGeschlecht");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/geschlecht', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geschlecht des Lehrers mit der angebebenen ID.
     * Schreibt das Geschlecht des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geschlecht des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerGeschlecht(schema, id, body) {
      return this.setLehrerGeschlechtWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den ersten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID.
     * Schreibt ersten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der erste Teil der Lehrer-Ident-Nummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerIdentNrTeil1WithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerIdentNrTeil1");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerIdentNrTeil1");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerIdentNrTeil1");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/identNrTeil1', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den ersten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID.
     * Schreibt ersten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der erste Teil der Lehrer-Ident-Nummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerIdentNrTeil1(schema, id, body) {
      return this.setLehrerIdentNrTeil1WithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den zweiten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID.
     * Schreibt zweiten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der zweite Teil der Lehrer-Ident-Nummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerIdentNrTeil2SerNrWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerIdentNrTeil2SerNr");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerIdentNrTeil2SerNr");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerIdentNrTeil2SerNr");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/identNrTeil2SerNr', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den zweiten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID.
     * Schreibt zweiten Teil der Lehrer-Ident-Nummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der zweite Teil der Lehrer-Ident-Nummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerIdentNrTeil2SerNr(schema, id, body) {
      return this.setLehrerIdentNrTeil2SerNrWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Kürzel des Lehrers mit der angebebenen ID.
     * Schreibt das Kürzel des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Kürzel des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerKuerzelWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerKuerzel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerKuerzel");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerKuerzel");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/kuerzel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Kürzel des Lehrers mit der angebebenen ID.
     * Schreibt das Kürzel des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Kürzel des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerKuerzel(schema, id, body) {
      return this.setLehrerKuerzelWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die LBV-Personalnummer des Lehrers mit der angebebenen ID.
     * Schreibt die LBV-Personalnummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die LBV-Personalnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerLbvPersonalnummerWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerLbvPersonalnummer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerLbvPersonalnummer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerLbvPersonalnummer");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/lbv_personalnummer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die LBV-Personalnummer des Lehrers mit der angebebenen ID.
     * Schreibt die LBV-Personalnummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die LBV-Personalnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerLbvPersonalnummer(schema, id, body) {
      return this.setLehrerLbvPersonalnummerWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die LBV-Vergütungsschlüssel des Lehrers mit der angebebenen ID.
     * Schreibt die LBV-Vergütungsschlüssel des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die LBV-Vergütungsschlüssel des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerLbvVerguetungsschluesselWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerLbvVerguetungsschluessel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerLbvVerguetungsschluessel");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerLbvVerguetungsschluessel");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/lbv_verguetungsschluessel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die LBV-Vergütungsschlüssel des Lehrers mit der angebebenen ID.
     * Schreibt die LBV-Vergütungsschlüssel des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die LBV-Vergütungsschlüssel des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerLbvVerguetungsschluessel(schema, id, body) {
      return this.setLehrerLbvVerguetungsschluesselWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Leitungsfunktion des Lehrers mit der angebebenen ID.
     * Schreibt die Leitungsfunktion des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Leitungsfunktion des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerLeitungsfunktionWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerLeitungsfunktion");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerLeitungsfunktion");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerLeitungsfunktion");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/leitungsfunktion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Leitungsfunktion des Lehrers mit der angebebenen ID.
     * Schreibt die Leitungsfunktion des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Leitungsfunktion des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerLeitungsfunktion(schema, id, body) {
      return this.setLehrerLeitungsfunktionWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Information, ob der Lehrer mit der angebebenen ID einen Impfnachweise erbracht hat.
     * Schreibt die Informatio, ob der Lehrer mit der angebebenen ID einen Impfnachweise erbracht hat, in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.body Die Information, ob der Lehrer einen Impfnachweis erbracht hat
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerMasernImpfnachweisWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerMasernImpfnachweis");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerMasernImpfnachweis");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/masern_impf_nachweis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Information, ob der Lehrer mit der angebebenen ID einen Impfnachweise erbracht hat.
     * Schreibt die Informatio, ob der Lehrer mit der angebebenen ID einen Impfnachweise erbracht hat, in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.body Die Information, ob der Lehrer einen Impfnachweis erbracht hat
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerMasernImpfnachweis(schema, id, opts) {
      return this.setLehrerMasernImpfnachweisWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Nachnamen des Lehrers mit der angebebenen ID.
     * Schreibt den Nachnamen des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Nachname des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerNachnameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerNachname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerNachname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerNachname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/nachname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Nachnamen des Lehrers mit der angebebenen ID.
     * Schreibt den Nachnamen des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Nachname des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerNachname(schema, id, body) {
      return this.setLehrerNachnameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID des Ortsteils des Wohnortes des Lehrers mit der angebebenen Lehrer-ID.
     * Schreibt die ID des Ortsteils des Wohnortes des Lehrers mit der angebebenen Lehrer-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Außerdem wird geprüft, ob die Ortsteil-ID gültig ist und dem Wohnort des Lehrer zugeordnet werden kann. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Ortsteils des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerOrtsteilIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerOrtsteilID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerOrtsteilID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/ortsteil_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID des Ortsteils des Wohnortes des Lehrers mit der angebebenen Lehrer-ID.
     * Schreibt die ID des Ortsteils des Wohnortes des Lehrers mit der angebebenen Lehrer-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Außerdem wird geprüft, ob die Ortsteil-ID gültig ist und dem Wohnort des Lehrer zugeordnet werden kann. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Ortsteils des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerOrtsteilID(schema, id, opts) {
      return this.setLehrerOrtsteilIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Legt den Personal-Typ für die angebebenen ID fest.
     * Schreibt den Personal-Typ für die angebebene ID in die Datenbank. Vor dem Schreiben wird geprüft, ob die ID in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Personal-Typ
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerPersonalTypWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerPersonalTyp");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerPersonalTyp");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerPersonalTyp");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/personal_typ', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Legt den Personal-Typ für die angebebenen ID fest.
     * Schreibt den Personal-Typ für die angebebene ID in die Datenbank. Vor dem Schreiben wird geprüft, ob die ID in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Personal-Typ
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerPersonalTyp(schema, id, body) {
      return this.setLehrerPersonalTypWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Personalaktennummer des Lehrers mit der angebebenen ID.
     * Schreibt die Personalaktennummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Personalaktennummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerPersonalaktennummerWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerPersonalaktennummer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerPersonalaktennummer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerPersonalaktennummer");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/personalaktennummer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Personalaktennummer des Lehrers mit der angebebenen ID.
     * Schreibt die Personalaktennummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Personalaktennummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerPersonalaktennummer(schema, id, body) {
      return this.setLehrerPersonalaktennummerWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Pflichtstundensoll des Lehrers mit der angebebenen ID.
     * Schreibt den Pflichtstundensoll des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Der Pflichtstundensoll des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerPflichtstundensollWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerPflichtstundensoll");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerPflichtstundensoll");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/pflichtstunden_soll', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Pflichtstundensoll des Lehrers mit der angebebenen ID.
     * Schreibt den Pflichtstundensoll des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Der Pflichtstundensoll des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerPflichtstundensoll(schema, id, opts) {
      return this.setLehrerPflichtstundensollWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Rechtverhältnis des Lehrers mit der angebebenen ID.
     * Schreibt das Rechtverhältnis des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Rechtverhältnis des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerRechtsverhaeltnisWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerRechtsverhaeltnis");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerRechtsverhaeltnis");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerRechtsverhaeltnis");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/rechtsverhaeltnis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Rechtverhältnis des Lehrers mit der angebebenen ID.
     * Schreibt das Rechtverhältnis des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Rechtverhältnis des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerRechtsverhaeltnis(schema, id, body) {
      return this.setLehrerRechtsverhaeltnisWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Staatsangehörigkeits-ID des Lehrers mit der angebebenen ID.
     * Schreibt die Staatsangehörigkeits-ID des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Staatsangehörigkeits-ID des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerStaatsangehoerigkeitIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerStaatsangehoerigkeitID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerStaatsangehoerigkeitID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/staatsangehoerigkeitID', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Staatsangehörigkeits-ID des Lehrers mit der angebebenen ID.
     * Schreibt die Staatsangehörigkeits-ID des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Staatsangehörigkeits-ID des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerStaatsangehoerigkeitID(schema, id, opts) {
      return this.setLehrerStaatsangehoerigkeitIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Stammschulnummer des Lehrers mit der angebebenen ID.
     * Schreibt die Stammschulnummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Stammschulnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerStammschulnummerWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerStammschulnummer");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerStammschulnummer");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerStammschulnummer");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/stammschulnummer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Stammschulnummer des Lehrers mit der angebebenen ID.
     * Schreibt die Stammschulnummer des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Die Stammschulnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerStammschulnummer(schema, id, body) {
      return this.setLehrerStammschulnummerWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Strasse des Wohnortes des Lehrers mit der angebebenen ID.
     * Schreibt die Strasse (mit Hausnummer) des Wohnortes des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Strasse des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerStrasseWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerStrasse");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerStrasse");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/strasse', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Strasse des Wohnortes des Lehrers mit der angebebenen ID.
     * Schreibt die Strasse (mit Hausnummer) des Wohnortes des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Strasse des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerStrasse(schema, id, opts) {
      return this.setLehrerStrasseWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Telefonnummer des Lehrers mit der angebebenen ID.
     * Schreibt die Telefonnummer des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Telefonnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerTelefonWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerTelefon");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerTelefon");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/telefon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Telefonnummer des Lehrers mit der angebebenen ID.
     * Schreibt die Telefonnummer des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Telefonnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerTelefon(schema, id, opts) {
      return this.setLehrerTelefonWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die mobile Telefonnummer des Lehrers mit der angebebenen ID.
     * Schreibt die mobile Telefonnummer des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die mobile Telefonnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerTelefonMobilWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerTelefonMobil");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerTelefonMobil");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/telefon_mobil', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die mobile Telefonnummer des Lehrers mit der angebebenen ID.
     * Schreibt die mobile Telefonnummer des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die mobile Telefonnummer des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerTelefonMobil(schema, id, opts) {
      return this.setLehrerTelefonMobilWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den akademischen Grad des Lehrers mit der angebebenen ID.
     * Schreibt den akademischen Grad des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag zum akademischen Grad entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Der akademische Grad des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerTitelWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerTitel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerTitel");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/titel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den akademischen Grad des Lehrers mit der angebebenen ID.
     * Schreibt den akademischen Grad des Lehrers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird ein evtl. vorhanderner Eintrag zum akademischen Grad entfernt.Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Der akademische Grad des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerTitel(schema, id, opts) {
      return this.setLehrerTitelWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Vornamen des Lehrers mit der angebebenen ID.
     * Schreibt den Vornamen des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Vorname des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerVornameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerVorname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerVorname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerVorname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/vorname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Vornamen des Lehrers mit der angebebenen ID.
     * Schreibt den Vornamen des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Vorname des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerVorname(schema, id, body) {
      return this.setLehrerVornameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID des Wohnortes des Lehrers mit der angebebenen Lehrer-ID.
     * Schreibt die ID des Wohnortes des Lehrers mit der angebebenen Lehrer-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Bei setzen eines neuen Wohnortes wird der dem Lehrer zugeordnete Ortsteil automatisch gelöscht. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerWohnortIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerWohnortID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerWohnortID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/wohnort_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID des Wohnortes des Lehrers mit der angebebenen Lehrer-ID.
     * Schreibt die ID des Wohnortes des Lehrers mit der angebebenen Lehrer-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Bei setzen eines neuen Wohnortes wird der dem Lehrer zugeordnete Ortsteil automatisch gelöscht. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Wohnortes des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerWohnortID(schema, id, opts) {
      return this.setLehrerWohnortIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Zugangsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Zugangsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Zugangsdatum des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerZugangsdatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerZugangsdatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerZugangsdatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerZugangsdatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/zugangsdatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Zugangsdatum des Lehrers mit der angebebenen ID.
     * Schreibt das Zugangsdatum des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Zugangsdatum des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerZugangsdatum(schema, id, body) {
      return this.setLehrerZugangsdatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Zugangsgrund des Lehrers mit der angebebenen ID.
     * Schreibt den Zugangsgrund des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Zugangsgrund des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setLehrerZugangsgrundWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setLehrerZugangsgrund");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setLehrerZugangsgrund");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setLehrerZugangsgrund");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/lehrer/{id}/zugangsgrund', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Zugangsgrund des Lehrers mit der angebebenen ID.
     * Schreibt den Zugangsgrund des Lehrers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Lehrer in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerpersonaldaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Zugangsgrund des Lehrers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setLehrerZugangsgrund(schema, id, body) {
      return this.setLehrerZugangsgrundWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
