/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BenutzerKennwort from '../model/BenutzerKennwort';

/**
* Schema service.
* @module api/SchemaApi
* @version 1.0.0
*/
export default class SchemaApi {

    /**
    * Constructs a new SchemaApi. 
    * @alias module:api/SchemaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Erstellt ein neues Schema der angegebenen Revision und dem angegebenen Namen.
     * Erstellt ein neues Schema der angegebenen Revision und dem angegebenen Namen, falls keine Schema mit dem angebenen Namen bereits existiert.
     * @param {String} schema 
     * @param {Number} revision 
     * @param {module:model/BenutzerKennwort} benutzerKennwort Der Benutzername und das Kennwort für den administrativen Zugang zum Schema
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createSchemaWithHttpInfo(schema, revision, benutzerKennwort) {
      let postBody = benutzerKennwort;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling createSchema");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling createSchema");
      }
      // verify the required parameter 'benutzerKennwort' is set
      if (benutzerKennwort === undefined || benutzerKennwort === null) {
        throw new Error("Missing the required parameter 'benutzerKennwort' when calling createSchema");
      }

      let pathParams = {
        'schema': schema,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/schema/root/create/{schema}/{revision}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Erstellt ein neues Schema der angegebenen Revision und dem angegebenen Namen.
     * Erstellt ein neues Schema der angegebenen Revision und dem angegebenen Namen, falls keine Schema mit dem angebenen Namen bereits existiert.
     * @param {String} schema 
     * @param {Number} revision 
     * @param {module:model/BenutzerKennwort} benutzerKennwort Der Benutzername und das Kennwort für den administrativen Zugang zum Schema
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createSchema(schema, revision, benutzerKennwort) {
      return this.createSchemaWithHttpInfo(schema, revision, benutzerKennwort)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Erstellt ein neues Schema der aktuellen Revision mit dem angegebenen Namen.
     * Erstellt ein neues Schema der aktuellen Revision mit dem angegebenen Namen, falls keines mit dem angebenen Namen bereits existiert.
     * @param {String} schema 
     * @param {module:model/BenutzerKennwort} benutzerKennwort Der Benutzername und das Kennwort für den administrativen Zugang zum Schema
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createSchemaCurrentWithHttpInfo(schema, benutzerKennwort) {
      let postBody = benutzerKennwort;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling createSchemaCurrent");
      }
      // verify the required parameter 'benutzerKennwort' is set
      if (benutzerKennwort === undefined || benutzerKennwort === null) {
        throw new Error("Missing the required parameter 'benutzerKennwort' when calling createSchemaCurrent");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/schema/root/create/{schema}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Erstellt ein neues Schema der aktuellen Revision mit dem angegebenen Namen.
     * Erstellt ein neues Schema der aktuellen Revision mit dem angegebenen Namen, falls keines mit dem angebenen Namen bereits existiert.
     * @param {String} schema 
     * @param {module:model/BenutzerKennwort} benutzerKennwort Der Benutzername und das Kennwort für den administrativen Zugang zum Schema
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createSchemaCurrent(schema, benutzerKennwort) {
      return this.createSchemaCurrentWithHttpInfo(schema, benutzerKennwort)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Entfernt das bestehende Schema mit dem angegebenen Namen.
     * Entfernt das Schema mit dem angegebenen Namen, falls es existiert.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    destroySchemaWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling destroySchema");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/schema/root/destroy/{schema}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Entfernt das bestehende Schema mit dem angegebenen Namen.
     * Entfernt das Schema mit dem angegebenen Namen, falls es existiert.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    destroySchema(schema) {
      return this.destroySchemaWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    getSchemaListeWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/schema/root/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    getSchemaListe() {
      return this.getSchemaListeWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Aktualisiert das angegebene Schema auf die angegebene Revision.
     * Prüft das Schema bezüglich der aktuellen Revision und aktualisiert das Schema ggf. auf die übergebene Revision, sofern diese in der Schema-Definition existiert.
     * @param {String} schema 
     * @param {Number} revision 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    updateSchemaWithHttpInfo(schema, revision) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling updateSchema");
      }
      // verify the required parameter 'revision' is set
      if (revision === undefined || revision === null) {
        throw new Error("Missing the required parameter 'revision' when calling updateSchema");
      }

      let pathParams = {
        'schema': schema,
        'revision': revision
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/db/{schema}/api/update/{revision}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Aktualisiert das angegebene Schema auf die angegebene Revision.
     * Prüft das Schema bezüglich der aktuellen Revision und aktualisiert das Schema ggf. auf die übergebene Revision, sofern diese in der Schema-Definition existiert.
     * @param {String} schema 
     * @param {Number} revision 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    updateSchema(schema, revision) {
      return this.updateSchemaWithHttpInfo(schema, revision)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Aktualisiert das angegebene Schema auf die neueste Revision.
     * Prüft das Schema bezüglich der aktuellen Revision und aktualisiert das Schema ggf. auf die neueste Revision.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
     */
    updateSchemaToCurrentWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling updateSchemaToCurrent");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/db/{schema}/api/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Aktualisiert das angegebene Schema auf die neueste Revision.
     * Prüft das Schema bezüglich der aktuellen Revision und aktualisiert das Schema ggf. auf die neueste Revision.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
     */
    updateSchemaToCurrent(schema) {
      return this.updateSchemaToCurrentWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
