/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Abiturdaten from '../model/Abiturdaten';
import GOStLeistungen from '../model/GOStLeistungen';

/**
* SchuelerGOSt service.
* @module api/SchuelerGOStApi
* @version 1.0.0
*/
export default class SchuelerGOStApi {

    /**
    * Constructs a new SchuelerGOStApi. 
    * @alias module:api/SchuelerGOStApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Liefert zu der ID des Schülers die zugehörigen Abiturdaten aus den entsprechenden Abiturtabellen der SVWS-DB.
     * Liest die Abiturdaten aus den Abiturtabellen des Schülers mit der angegebene ID und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Abiturdaten} and HTTP response
     */
    getSchuelerGOStAbiturdatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerGOStAbiturdaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchuelerGOStAbiturdaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Abiturdaten;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/gost/{id}/abiturdaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Schülers die zugehörigen Abiturdaten aus den entsprechenden Abiturtabellen der SVWS-DB.
     * Liest die Abiturdaten aus den Abiturtabellen des Schülers mit der angegebene ID und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Abiturdaten}
     */
    getSchuelerGOStAbiturdaten(schema, id) {
      return this.getSchuelerGOStAbiturdatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Liefert zu der ID des Schülers die zugehörigen Abiturdaten, die aus den Leistungsdaten der Oberstufe gewonnen werden können.
     * Liest die Abiturdaten aus den Leistungsdaten der gymnasiale Oberstufe des Schülers mit der angegebene ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Abiturdaten} and HTTP response
     */
    getSchuelerGOStAbiturdatenAusLeistungsdatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerGOStAbiturdatenAusLeistungsdaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchuelerGOStAbiturdatenAusLeistungsdaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Abiturdaten;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/gost/{id}/abiturdatenAusLeistungsdaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Schülers die zugehörigen Abiturdaten, die aus den Leistungsdaten der Oberstufe gewonnen werden können.
     * Liest die Abiturdaten aus den Leistungsdaten der gymnasiale Oberstufe des Schülers mit der angegebene ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Abiturdaten}
     */
    getSchuelerGOStAbiturdatenAusLeistungsdaten(schema, id) {
      return this.getSchuelerGOStAbiturdatenAusLeistungsdatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Liefert zu der ID des Schülers die zugehörigen Leistungsdaten in Bezug auf die gymnasiale Oberstufe.
     * Liest die Leistungsdaten in Bezug auf die gymnasiale Oberstufe des Schülers mit der angegebene ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GOStLeistungen} and HTTP response
     */
    getSchuelerGOStLeistungsdatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerGOStLeistungsdaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchuelerGOStLeistungsdaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GOStLeistungen;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/gost/{id}/leistungsdaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Schülers die zugehörigen Leistungsdaten in Bezug auf die gymnasiale Oberstufe.
     * Liest die Leistungsdaten in Bezug auf die gymnasiale Oberstufe des Schülers mit der angegebene ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen der Leistungsdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GOStLeistungen}
     */
    getSchuelerGOStLeistungsdaten(schema, id) {
      return this.getSchuelerGOStLeistungsdatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
