/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KatalogEintrag from '../model/KatalogEintrag';
import SchuelerStammdaten from '../model/SchuelerStammdaten';
import SchuelerlisteEintrag from '../model/SchuelerlisteEintrag';

/**
* Schueler service.
* @module api/SchuelerApi
* @version 1.0.0
*/
export default class SchuelerApi {

    /**
    * Constructs a new SchuelerApi. 
    * @alias module:api/SchuelerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Gibt den Katalog der Fahrschülerarten zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Fahrschülerarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KatalogEintrag>} and HTTP response
     */
    getSchuelerKatalogFahrschuelerartWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerKatalogFahrschuelerart");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/schueler/katalog/fahrschuelerart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Fahrschülerarten zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Fahrschülerarten unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KatalogEintrag>}
     */
    getSchuelerKatalogFahrschuelerart(schema) {
      return this.getSchuelerKatalogFahrschuelerartWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt den Katalog der Förderschwerpunkte zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Förderschwerpunkte unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KatalogEintrag>} and HTTP response
     */
    getSchuelerKatalogFoerderschwerpunktWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerKatalogFoerderschwerpunkt");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KatalogEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/schueler/katalog/foerderschwerpunkte', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt den Katalog der Förderschwerpunkte zurück.
     * Erstellt eine Liste aller in dem Katalog vorhanden Förderschwerpunkte unter Angabe der ID, eines Kürzels und der Bezeichnung. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Katalogen besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KatalogEintrag>}
     */
    getSchuelerKatalogFoerderschwerpunkt(schema) {
      return this.getSchuelerKatalogFoerderschwerpunktWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Gibt eine sortierte Übersicht von allen Schülern zurück.
     * Erstellt eine Liste aller in der Datenbank vorhanden Schüler unter Angabe der ID, des Vor- und Nachnamens, der Klasse, des Jahrgangs, sein Status (z.B. aktiv), einer Sortierreihenfolge, ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Die schüler sind anhand der Klasse, des Nchnamens und des Vornamens sortiert.Es wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Schülerdaten besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SchuelerlisteEintrag>} and HTTP response
     */
    getSchuelerListeWithHttpInfo(schema) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerListe");
      }

      let pathParams = {
        'schema': schema
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SchuelerlisteEintrag];
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/liste', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Gibt eine sortierte Übersicht von allen Schülern zurück.
     * Erstellt eine Liste aller in der Datenbank vorhanden Schüler unter Angabe der ID, des Vor- und Nachnamens, der Klasse, des Jahrgangs, sein Status (z.B. aktiv), einer Sortierreihenfolge, ob sie in der Anwendung sichtbar bzw. änderbar sein sollen. Die schüler sind anhand der Klasse, des Nchnamens und des Vornamens sortiert.Es wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Schülerdaten besitzt.
     * @param {String} schema 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SchuelerlisteEintrag>}
     */
    getSchuelerListe(schema) {
      return this.getSchuelerListeWithHttpInfo(schema)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Liefert zu der ID des Schülers die zugehörigen Stammdaten.
     * Liest die Stammdaten des Schülers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SchuelerStammdaten} and HTTP response
     */
    getSchuelerStammdatenWithHttpInfo(schema, id) {
      let postBody = null;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling getSchuelerStammdaten");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSchuelerStammdaten");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SchuelerStammdaten;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/stammdaten', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Liefert zu der ID des Schülers die zugehörigen Stammdaten.
     * Liest die Stammdaten des Schülers zu der angegebenen ID aus der Datenbank und liefert diese zurück. Dabei wird geprüft, ob der SVWS-Benutzer die notwendige Berechtigung zum Ansehen von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SchuelerStammdaten}
     */
    getSchuelerStammdaten(schema, id) {
      return this.getSchuelerStammdatenWithHttpInfo(schema, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt alle Vornamen des Schülers mit der angebebenen ID.
     * Schreibt alle Vornamen des Schülers mit der angebebenen ID in die Datenbank, sofern mehrere Vornamen vorliegen. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Alle Vornamen des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerAlleVornamenWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerAlleVornamen");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerAlleVornamen");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerAlleVornamen");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/alleVornamen', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt alle Vornamen des Schülers mit der angebebenen ID.
     * Schreibt alle Vornamen des Schülers mit der angebebenen ID in die Datenbank, sofern mehrere Vornamen vorliegen. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Alle Vornamen des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerAlleVornamen(schema, id, body) {
      return this.setSchuelerAlleVornamenWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Anmeldedatum des Schülers mit der angebebenen ID.
     * Schreibt das Anmeldedatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Anmeldedatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerAnmeldedatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerAnmeldedatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerAnmeldedatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerAnmeldedatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/anmeldedatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Anmeldedatum des Schülers mit der angebebenen ID.
     * Schreibt das Anmeldedatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Anmeldedatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerAnmeldedatum(schema, id, body) {
      return this.setSchuelerAnmeldedatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Aufnahmedatum des Schülers mit der angebebenen ID.
     * Schreibt das Aufnahmedatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Aufnahmedatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerAufnahmedatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerAufnahmedatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerAufnahmedatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerAufnahmedatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/aufnahmedatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Aufnahmedatum des Schülers mit der angebebenen ID.
     * Schreibt das Aufnahmedatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Aufnahmedatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerAufnahmedatum(schema, id, body) {
      return this.setSchuelerAufnahmedatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Bemerkungen zum Schüler mit der angebebenen ID.
     * Schreibt die Bemerkungen zum Schüler mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Bemerkungen zum Schüler
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerBemerkungenWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerBemerkungen");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerBemerkungen");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/bemerkungen', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Bemerkungen zum Schüler mit der angebebenen ID.
     * Schreibt die Bemerkungen zum Schüler mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Bemerkungen zum Schüler
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerBemerkungen(schema, id, opts) {
      return this.setSchuelerBemerkungenWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob in Bezug auf den Schüler mit der angebebenen ID die Konfession auf Zeugnisse gedruckt werden soll oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID die Konfession auf Zeugnisse gedruckt werden soll oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob in Bezug auf den Schüler die Konfession auf Zeugnisse gedruckt werden soll oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerDruckeKonfessionAufZeugnisseWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerDruckeKonfessionAufZeugnisse");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerDruckeKonfessionAufZeugnisse");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerDruckeKonfessionAufZeugnisse");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/drucke_konfession_auf_zeugnisse', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob in Bezug auf den Schüler mit der angebebenen ID die Konfession auf Zeugnisse gedruckt werden soll oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID die Konfession auf Zeugnisse gedruckt werden soll oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob in Bezug auf den Schüler die Konfession auf Zeugnisse gedruckt werden soll oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerDruckeKonfessionAufZeugnisse(schema, id, body) {
      return this.setSchuelerDruckeKonfessionAufZeugnisseWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die private E-Mail-Adresse des Schülers mit der angebebenen ID.
     * Schreibt die private E-Mail-Adresse des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die private E-Mail-Adresse des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerEmailPrivatWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerEmailPrivat");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerEmailPrivat");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/email_privat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die private E-Mail-Adresse des Schülers mit der angebebenen ID.
     * Schreibt die private E-Mail-Adresse des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die private E-Mail-Adresse des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerEmailPrivat(schema, id, opts) {
      return this.setSchuelerEmailPrivatWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die dienstliche E-Mail-Adresse des Schülers mit der angebebenen ID.
     * Schreibt die dienstliche E-Mail-Adresse des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die dienstliche E-Mail-Adresse des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerEmailSchuleWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerEmailSchule");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerEmailSchule");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/email_schule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die dienstliche E-Mail-Adresse des Schülers mit der angebebenen ID.
     * Schreibt die dienstliche E-Mail-Adresse des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die dienstliche E-Mail-Adresse des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerEmailSchule(schema, id, opts) {
      return this.setSchuelerEmailSchuleWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID Meister-BAFöG erhält oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID Meister-BAFöG erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler Meister-BAFöG erhält oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerErhaeltMeisterBAFOEGWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerErhaeltMeisterBAFOEG");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerErhaeltMeisterBAFOEG");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerErhaeltMeisterBAFOEG");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/erhaelt_meister_bafoeg', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID Meister-BAFöG erhält oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID Meister-BAFöG erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler Meister-BAFöG erhält oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerErhaeltMeisterBAFOEG(schema, id, body) {
      return this.setSchuelerErhaeltMeisterBAFOEGWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID Schüler-BAFöG erhält oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID Schüler-BAFöG erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler Schüler-BAFöG erhält oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerErhaeltSchuelerBAFOEGWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerErhaeltSchuelerBAFOEG");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerErhaeltSchuelerBAFOEG");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerErhaeltSchuelerBAFOEG");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/erhaelt_schueler_bafoeg', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID Schüler-BAFöG erhält oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID Schüler-BAFöG erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler Schüler-BAFöG erhält oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerErhaeltSchuelerBAFOEG(schema, id, body) {
      return this.setSchuelerErhaeltSchuelerBAFOEGWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID der Fahrschülerart des Schülers mit der angebebenen ID.
     * Schreibt die ID der Fahrschülerart des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Fahrschülerart des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerFahrschuelerArtIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerFahrschuelerArtID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerFahrschuelerArtID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/fahrschueler_art_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID der Fahrschülerart des Schülers mit der angebebenen ID.
     * Schreibt die ID der Fahrschülerart des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Fahrschülerart des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerFahrschuelerArtID(schema, id, opts) {
      return this.setSchuelerFahrschuelerArtIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID eines zweiten Förderschwerpunktes des Schülers mit der angebebenen ID.
     * Schreibt die ID eines zweiten Förderschwerpunktes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID eines zweiten Förderschwerpunktes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerFoerderschwerpunkt2IDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerFoerderschwerpunkt2ID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerFoerderschwerpunkt2ID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/foerderschwerpunkt2_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID eines zweiten Förderschwerpunktes des Schülers mit der angebebenen ID.
     * Schreibt die ID eines zweiten Förderschwerpunktes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID eines zweiten Förderschwerpunktes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerFoerderschwerpunkt2ID(schema, id, opts) {
      return this.setSchuelerFoerderschwerpunkt2IDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID des Hauptförderschwerpunktes des Schülers mit der angebebenen ID.
     * Schreibt die ID des Hauptförderschwerpunktes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Hauptförderschwerpunktes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerFoerderschwerpunktIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerFoerderschwerpunktID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerFoerderschwerpunktID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/foerderschwerpunkt_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID des Hauptförderschwerpunktes des Schülers mit der angebebenen ID.
     * Schreibt die ID des Hauptförderschwerpunktes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Hauptförderschwerpunktes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerFoerderschwerpunktID(schema, id, opts) {
      return this.setSchuelerFoerderschwerpunktIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Base64-JPG-kodierte Foto des Schülers mit der angebebenen ID.
     * Schreibt das Base64-JPG-kodierte Foto des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Base64-JPG-kodierte Foto des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerFotoWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerFoto");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerFoto");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerFoto");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/foto', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Base64-JPG-kodierte Foto des Schülers mit der angebebenen ID.
     * Schreibt das Base64-JPG-kodierte Foto des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Base64-JPG-kodierte Foto des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerFoto(schema, id, body) {
      return this.setSchuelerFotoWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geburtsdatum des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsdatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geburtsdatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtsdatumWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtsdatum");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtsdatum");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerGeburtsdatum");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsdatum', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geburtsdatum des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsdatum des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geburtsdatum des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtsdatum(schema, id, body) {
      return this.setSchuelerGeburtsdatumWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geburtsland des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtslandWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtsland");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtsland");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsland', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geburtsland des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtsland(schema, id, opts) {
      return this.setSchuelerGeburtslandWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geburtsland der Mutter des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland der Mutter des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland der Mutter des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtslandMutterWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtslandMutter");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtslandMutter");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsland_mutter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geburtsland der Mutter des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland der Mutter des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland der Mutter des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtslandMutter(schema, id, opts) {
      return this.setSchuelerGeburtslandMutterWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geburtsland des Vaters des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland des Vaters des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland des Vaters des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtslandVaterWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtslandVater");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtslandVater");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsland_vater', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geburtsland des Vaters des Schülers mit der angebebenen ID.
     * Schreibt das Geburtsland des Vaters des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Geburtsland des Vaters des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtslandVater(schema, id, opts) {
      return this.setSchuelerGeburtslandVaterWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Geburtsnamen des Schülers mit der angebebenen ID.
     * Schreibt den Geburtsnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Geburtsname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtsnameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtsname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtsname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerGeburtsname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Geburtsnamen des Schülers mit der angebebenen ID.
     * Schreibt den Geburtsnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Geburtsname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtsname(schema, id, body) {
      return this.setSchuelerGeburtsnameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Geburtsort des Schülers mit der angebebenen ID.
     * Schreibt den Geburtsort des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Geburtsort des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeburtsortWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeburtsort");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeburtsort");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerGeburtsort");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geburtsort', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Geburtsort des Schülers mit der angebebenen ID.
     * Schreibt den Geburtsort des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Geburtsort des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeburtsort(schema, id, body) {
      return this.setSchuelerGeburtsortWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Geschlecht des Schülers mit der angebebenen ID.
     * Schreibt das Geschlecht des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geschlecht des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerGeschlechtWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerGeschlecht");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerGeschlecht");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerGeschlecht");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/geschlecht', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Geschlecht des Schülers mit der angebebenen ID.
     * Schreibt das Geschlecht des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Geschlecht des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerGeschlecht(schema, id, body) {
      return this.setSchuelerGeschlechtWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID der Haltestelle, an der der Schüler mit der angebebenen ID einsteigt.
     * Schreibt die ID der Haltestelle, an der der Schüler mit der angebebenen ID einsteigt, in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Haltestelle
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerHaltestelleIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerHaltestelleID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerHaltestelleID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/haltestelleID', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID der Haltestelle, an der der Schüler mit der angebebenen ID einsteigt.
     * Schreibt die ID der Haltestelle, an der der Schüler mit der angebebenen ID einsteigt, in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Haltestelle
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerHaltestelleID(schema, id, opts) {
      return this.setSchuelerHaltestelleIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID einen Masernimpfnachweis erbracht hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID einen Masernimpfnachweis erbracht hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler einen Masernimpfnachweis erbracht hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerHatMasernimpfnachweisWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerHatMasernimpfnachweis");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerHatMasernimpfnachweis");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerHatMasernimpfnachweis");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/hat_masernimpfnachweis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID einen Masernimpfnachweis erbracht hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID einen Masernimpfnachweis erbracht hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler einen Masernimpfnachweis erbracht hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerHatMasernimpfnachweis(schema, id, body) {
      return this.setSchuelerHatMasernimpfnachweisWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob bei dem Schüler mit der angebebenen ID ein Migrationshintergrund vorliegt.
     * Schreibt ob bei dem Schüler mit der angebebenen ID ein Migrationshintergrund vorliegt in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler einen Migrationshintegrund hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerHatMigrationshintergrundWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerHatMigrationshintergrund");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerHatMigrationshintergrund");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerHatMigrationshintergrund");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/hat_migrationshintergrund', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob bei dem Schüler mit der angebebenen ID ein Migrationshintergrund vorliegt.
     * Schreibt ob bei dem Schüler mit der angebebenen ID ein Migrationshintergrund vorliegt in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler einen Migrationshintegrund hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerHatMigrationshintergrund(schema, id, body) {
      return this.setSchuelerHatMigrationshintergrundWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler eine sonderpädagogische Förderung nach AO-SF erhält oder nicht.
     * Schreibt ob der Schüler eine sonderpädagogische Förderung nach AO-SF erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information zur sonderpädagogischen Fördernung nach AO-SF.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstAOSFWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstAOSF");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstAOSF");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstAOSF");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_aosf', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler eine sonderpädagogische Förderung nach AO-SF erhält oder nicht.
     * Schreibt ob der Schüler eine sonderpädagogische Förderung nach AO-SF erhält oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information zur sonderpädagogischen Fördernung nach AO-SF.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstAOSF(schema, id, body) {
      return this.setSchuelerIstAOSFWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID seine Berufsschulpflicht bereits erfüllt hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID seine Berufsschulpflicht bereits erfüllt hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler seine Berufsschulpflicht erfüllt hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstBerufsschulpflichtErfuelltWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstBerufsschulpflichtErfuellt");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstBerufsschulpflichtErfuellt");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstBerufsschulpflichtErfuellt");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_berufsschulpflicht_erfuellt', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID seine Berufsschulpflicht bereits erfüllt hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID seine Berufsschulpflicht bereits erfüllt hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler seine Berufsschulpflicht erfüllt hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstBerufsschulpflichtErfuellt(schema, id, body) {
      return this.setSchuelerIstBerufsschulpflichtErfuelltWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob es sich beim Schülerdatensatz mit der angebebenen ID um ein Duplikat handelt oder nicht.
     * Schreibt ob es sich beim Schülerdatensatz mit der angebebenen ID um ein Duplikat handelt oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schülerdatensatz ein Duplikat ist oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstDuplikatWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstDuplikat");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstDuplikat");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstDuplikat");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_duplikat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob es sich beim Schülerdatensatz mit der angebebenen ID um ein Duplikat handelt oder nicht.
     * Schreibt ob es sich beim Schülerdatensatz mit der angebebenen ID um ein Duplikat handelt oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schülerdatensatz ein Duplikat ist oder nicht.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstDuplikat(schema, id, body) {
      return this.setSchuelerIstDuplikatWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler zieldifferent unterrichtet wird oder nicht.
     * Schreibt ob der Schüler zieldifferent unterrichtet wird oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information zum zieldifferenten Lernen.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstLernenZieldifferentWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstLernenZieldifferent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstLernenZieldifferent");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstLernenZieldifferent");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_lernen_zieldifferent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler zieldifferent unterrichtet wird oder nicht.
     * Schreibt ob der Schüler zieldifferent unterrichtet wird oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information zum zieldifferenten Lernen.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstLernenZieldifferent(schema, id, body) {
      return this.setSchuelerIstLernenZieldifferentWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID seine Schulpflicht bereits erfüllt hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID seine Schulpflicht bereits erfüllt hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler seine Schulfplicht erfüllt hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstSchulpflichtErfuelltWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstSchulpflichtErfuellt");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstSchulpflichtErfuellt");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstSchulpflichtErfuellt");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_schulpflicht_erfuellt', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID seine Schulpflicht bereits erfüllt hat oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID seine Schulpflicht bereits erfüllt hat oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler seine Schulfplicht erfüllt hat.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstSchulpflichtErfuellt(schema, id, body) {
      return this.setSchuelerIstSchulpflichtErfuelltWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob der Schüler mit der angebebenen ID volljährig ist oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID volljährig ist oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler volljährig ist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerIstVolljaehrigWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerIstVolljaehrig");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerIstVolljaehrig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerIstVolljaehrig");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ist_volljaehrig', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob der Schüler mit der angebebenen ID volljährig ist oder nicht.
     * Schreibt ob der Schüler mit der angebebenen ID volljährig ist oder nicht in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob der Schüler volljährig ist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerIstVolljaehrig(schema, id, body) {
      return this.setSchuelerIstVolljaehrigWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt ob in Bezug auf den Schüler mit der angebebenen ID keine Auskunft an dritte erteilt werden darf.
     * Schreibt ob der Schüler mit der angebebenen ID keine Auskunft an dritte erteilt werden darf in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob in Bezug auf den Schüler eine Auskunft an Dritte erteilt werden darf.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerKeineAuskunftAnDritteWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerKeineAuskunftAnDritte");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerKeineAuskunftAnDritte");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerKeineAuskunftAnDritte");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/keine_auskunft_an_dritte', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt ob in Bezug auf den Schüler mit der angebebenen ID keine Auskunft an dritte erteilt werden darf.
     * Schreibt ob der Schüler mit der angebebenen ID keine Auskunft an dritte erteilt werden darf in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Boolean} body Die Information, ob in Bezug auf den Schüler eine Auskunft an Dritte erteilt werden darf.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerKeineAuskunftAnDritte(schema, id, body) {
      return this.setSchuelerKeineAuskunftAnDritteWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Nachnamen des Schülers mit der angebebenen ID.
     * Schreibt den Nachnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Nachname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerNachnameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerNachname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerNachname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerNachname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/nachname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Nachnamen des Schülers mit der angebebenen ID.
     * Schreibt den Nachnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Nachname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerNachname(schema, id, body) {
      return this.setSchuelerNachnameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID des Ortsteils des Wohnortes des Schülers mit der angebebenen Schüler-ID.
     * Schreibt die ID des Ortsteils des Wohnortes des Schülers mit der angebebenen Schüler-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Außerdem wird geprüft, ob die Ortsteil-ID gültig ist und dem Wohnort des Schülers zugeordnet werden kann. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Ortsteils des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerOrtsteilIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerOrtsteilID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerOrtsteilID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/ortsteil_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID des Ortsteils des Wohnortes des Schülers mit der angebebenen Schüler-ID.
     * Schreibt die ID des Ortsteils des Wohnortes des Schülers mit der angebebenen Schüler-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Außerdem wird geprüft, ob die Ortsteil-ID gültig ist und dem Wohnort des Schülers zugeordnet werden kann. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Ortsteils des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerOrtsteilID(schema, id, opts) {
      return this.setSchuelerOrtsteilIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID der Religion des Schülers mit der angebebenen ID.
     * Schreibt die ID der Religion des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Religion des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerReligionIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerReligionID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerReligionID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/religion_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID der Religion des Schülers mit der angebebenen ID.
     * Schreibt die ID der Religion des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID der Religion des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerReligionID(schema, id, opts) {
      return this.setSchuelerReligionIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Datum der Religionsabmeldung des Schülers mit der angebebenen ID.
     * Schreibt das Datum der Religionsabmeldung des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Datum der Religionsabmeldung des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerReligionabmeldungWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerReligionabmeldung");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerReligionabmeldung");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerReligionabmeldung");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/religionabmeldung', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Datum der Religionsabmeldung des Schülers mit der angebebenen ID.
     * Schreibt das Datum der Religionsabmeldung des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Datum der Religionsabmeldung des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerReligionabmeldung(schema, id, body) {
      return this.setSchuelerReligionabmeldungWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Datum der Religionsanmeldung des Schülers mit der angebebenen ID.
     * Schreibt das Datum der Religionsanmeldung des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Datum der Religionsanmeldung des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerReligionanmeldungWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerReligionanmeldung");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerReligionanmeldung");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerReligionanmeldung");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/religionanmeldung', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Datum der Religionsanmeldung des Schülers mit der angebebenen ID.
     * Schreibt das Datum der Religionsanmeldung des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Das Datum der Religionsanmeldung des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerReligionanmeldung(schema, id, body) {
      return this.setSchuelerReligionanmeldungWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID der zweiten Staatsangehörigkeit des Schülers mit der angebebenen ID.
     * Schreibt die ID der zweiten Staatsangehörigkeit des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die ID der zweiten Staatsangehörigkeit des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerStaatsangehoerigkeit2IDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerStaatsangehoerigkeit2ID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerStaatsangehoerigkeit2ID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/staatsangehoerigkeit2ID', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID der zweiten Staatsangehörigkeit des Schülers mit der angebebenen ID.
     * Schreibt die ID der zweiten Staatsangehörigkeit des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die ID der zweiten Staatsangehörigkeit des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerStaatsangehoerigkeit2ID(schema, id, opts) {
      return this.setSchuelerStaatsangehoerigkeit2IDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID der Staatsangehörigkeit des Schülers mit der angebebenen ID.
     * Schreibt die ID der Staatsangehörigkeit des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die ID der Staatsangehörigkeit des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerStaatsangehoerigkeitIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerStaatsangehoerigkeitID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerStaatsangehoerigkeitID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/staatsangehoerigkeitID', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID der Staatsangehörigkeit des Schülers mit der angebebenen ID.
     * Schreibt die ID der Staatsangehörigkeit des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die ID der Staatsangehörigkeit des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerStaatsangehoerigkeitID(schema, id, opts) {
      return this.setSchuelerStaatsangehoerigkeitIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Legt den Status des Schülers mit der angebebenen ID fest.
     * Schreibt den Status des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob die ID in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerStatusWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerStatus");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerStatus");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerStatus");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Legt den Status des Schülers mit der angebebenen ID fest.
     * Schreibt den Status des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob die ID in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Lehrerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Status
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerStatus(schema, id, body) {
      return this.setSchuelerStatusWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Strasse des Wohnortes des Schülers mit der angebebenen ID.
     * Schreibt die Strasse (mit Hausnummer) des Wohnortes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Strasse des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerStrasseWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerStrasse");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerStrasse");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/strasse', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Strasse des Wohnortes des Schülers mit der angebebenen ID.
     * Schreibt die Strasse (mit Hausnummer) des Wohnortes des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Strasse des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerStrasse(schema, id, opts) {
      return this.setSchuelerStrasseWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Telefonnummer des Schülers mit der angebebenen ID.
     * Schreibt die Telefonnummer des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Telefonnummer des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerTelefonWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerTelefon");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerTelefon");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/telefon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Telefonnummer des Schülers mit der angebebenen ID.
     * Schreibt die Telefonnummer des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Telefonnummer des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerTelefon(schema, id, opts) {
      return this.setSchuelerTelefonWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die mobile Telefonnummer des Schülers mit der angebebenen ID.
     * Schreibt die mobile Telefonnummer des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die mobile Telefonnummer des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerTelefonMobilWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerTelefonMobil");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerTelefonMobil");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/telefon_mobil', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die mobile Telefonnummer des Schülers mit der angebebenen ID.
     * Schreibt die mobile Telefonnummer des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die mobile Telefonnummer des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerTelefonMobil(schema, id, opts) {
      return this.setSchuelerTelefonMobilWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die Verkehrsprache in der Familie des Schülers mit der angebebenen ID.
     * Schreibt die Verkehrsprache in der Familie des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Verkehrsprache in der Familie
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerVerkehrspracheFamilieWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerVerkehrspracheFamilie");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerVerkehrspracheFamilie");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/verkehrsprache_familie', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die Verkehrsprache in der Familie des Schülers mit der angebebenen ID.
     * Schreibt die Verkehrsprache in der Familie des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Die Verkehrsprache in der Familie
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerVerkehrspracheFamilie(schema, id, opts) {
      return this.setSchuelerVerkehrspracheFamilieWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Vornamen des Schülers mit der angebebenen ID.
     * Schreibt den Vornamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Vorname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerVornameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerVorname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerVorname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerVorname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/vorname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Vornamen des Schülers mit der angebebenen ID.
     * Schreibt den Vornamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Vorname des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerVorname(schema, id, body) {
      return this.setSchuelerVornameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt die ID des Wohnortes des Schülers mit der angebebenen Schüler-ID.
     * Schreibt die ID des Wohnortes des Schülers mit der angebebenen Schüler-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Bei setzen eines neuen Wohnortes wird der dem Schüler zugeordnete Ortsteil automatisch gelöscht. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerWohnortIDWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerWohnortID");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerWohnortID");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/wohnort_id', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt die ID des Wohnortes des Schülers mit der angebebenen Schüler-ID.
     * Schreibt die ID des Wohnortes des Schülers mit der angebebenen Schüler-ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt. Bei setzen eines neuen Wohnortes wird der dem Schüler zugeordnete Ortsteil automatisch gelöscht. Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.body Die ID des Wohnortes des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerWohnortID(schema, id, opts) {
      return this.setSchuelerWohnortIDWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt den Zusatz zum Nachnamen des Schülers mit der angebebenen ID.
     * Schreibt den Zusatz zum Nachnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Zusatz zum Nachnamen des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerZusatzNachnameWithHttpInfo(schema, id, body) {
      let postBody = body;
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerZusatzNachname");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerZusatzNachname");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setSchuelerZusatzNachname");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/zusatzNachname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt den Zusatz zum Nachnamen des Schülers mit der angebebenen ID.
     * Schreibt den Zusatz zum Nachnamen des Schülers mit der angebebenen ID in die Datenbank. Vor dem Schreiben wird geprüft, ob der Schülers in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {String} body Der Zusatz zum Nachnamen des Schülers
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerZusatzNachname(schema, id, body) {
      return this.setSchuelerZusatzNachnameWithHttpInfo(schema, id, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Schreibt das Zuzugsjahr des Schülers mit der angebebenen ID.
     * Schreibt das Zuzugsjahr des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Zuzugsjahr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    setSchuelerZuzugsjahrWithHttpInfo(schema, id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling setSchuelerZuzugsjahr");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setSchuelerZuzugsjahr");
      }

      let pathParams = {
        'schema': schema,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['text/plain'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/db/{schema}/api/schueler/{id}/zuzugsjahr', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Schreibt das Zuzugsjahr des Schülers mit der angebebenen ID.
     * Schreibt das Zuzugsjahr des Schülers mit der angebebenen ID in die Datenbank. Wird der Parameter weggelassen, so wird eine evtl. vorhandene Angabe entfernt.Vor dem Schreiben wird geprüft, ob der Schüler in der Datenbank vorhanden ist und der SVWS-Benutzer die notwendige Berechtigung zum Ändern von Schülerdaten besitzt.
     * @param {String} schema 
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Das Zuzugsjahr
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    setSchuelerZuzugsjahr(schema, id, opts) {
      return this.setSchuelerZuzugsjahrWithHttpInfo(schema, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
