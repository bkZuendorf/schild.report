/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LehrerPersonaldaten model module.
 * @module model/LehrerPersonaldaten
 * @version 1.0.0
 */
class LehrerPersonaldaten {
    /**
     * Constructs a new <code>LehrerPersonaldaten</code>.
     * Die Personaldaten eines Lehrer-Eintrags.
     * @alias module:model/LehrerPersonaldaten
     * @param id {Number} die ID des Lehrers
     */
    constructor(id) { 
        
        LehrerPersonaldaten.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>LehrerPersonaldaten</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LehrerPersonaldaten} obj Optional instance to populate.
     * @return {module:model/LehrerPersonaldaten} The populated <code>LehrerPersonaldaten</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LehrerPersonaldaten();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('identNrTeil1')) {
                obj['identNrTeil1'] = ApiClient.convertToType(data['identNrTeil1'], 'String');
            }
            if (data.hasOwnProperty('identNrTeil2SerNr')) {
                obj['identNrTeil2SerNr'] = ApiClient.convertToType(data['identNrTeil2SerNr'], 'String');
            }
            if (data.hasOwnProperty('personalaktennummer')) {
                obj['personalaktennummer'] = ApiClient.convertToType(data['personalaktennummer'], 'String');
            }
            if (data.hasOwnProperty('lbvPersonalnummer')) {
                obj['lbvPersonalnummer'] = ApiClient.convertToType(data['lbvPersonalnummer'], 'String');
            }
            if (data.hasOwnProperty('lbvVerguetungsschluessel')) {
                obj['lbvVerguetungsschluessel'] = ApiClient.convertToType(data['lbvVerguetungsschluessel'], 'String');
            }
            if (data.hasOwnProperty('zugangsdatum')) {
                obj['zugangsdatum'] = ApiClient.convertToType(data['zugangsdatum'], 'String');
            }
            if (data.hasOwnProperty('zugangsgrund')) {
                obj['zugangsgrund'] = ApiClient.convertToType(data['zugangsgrund'], 'String');
            }
            if (data.hasOwnProperty('abgangsdatum')) {
                obj['abgangsdatum'] = ApiClient.convertToType(data['abgangsdatum'], 'String');
            }
            if (data.hasOwnProperty('abgangsgrund')) {
                obj['abgangsgrund'] = ApiClient.convertToType(data['abgangsgrund'], 'String');
            }
            if (data.hasOwnProperty('leitungsfunktion')) {
                obj['leitungsfunktion'] = ApiClient.convertToType(data['leitungsfunktion'], 'String');
            }
            if (data.hasOwnProperty('pflichtstundensoll')) {
                obj['pflichtstundensoll'] = ApiClient.convertToType(data['pflichtstundensoll'], 'Number');
            }
            if (data.hasOwnProperty('rechtsverhaeltnis')) {
                obj['rechtsverhaeltnis'] = ApiClient.convertToType(data['rechtsverhaeltnis'], 'String');
            }
            if (data.hasOwnProperty('beschaeftigungsart')) {
                obj['beschaeftigungsart'] = ApiClient.convertToType(data['beschaeftigungsart'], 'String');
            }
            if (data.hasOwnProperty('einsatzstatus')) {
                obj['einsatzstatus'] = ApiClient.convertToType(data['einsatzstatus'], 'String');
            }
            if (data.hasOwnProperty('stammschulnummer')) {
                obj['stammschulnummer'] = ApiClient.convertToType(data['stammschulnummer'], 'String');
            }
            if (data.hasOwnProperty('masernImpfnachweis')) {
                obj['masernImpfnachweis'] = ApiClient.convertToType(data['masernImpfnachweis'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * die ID des Lehrers
 * @member {Number} id
 */
LehrerPersonaldaten.prototype['id'] = undefined;

/**
 * Der vordere Teil der NRW-weit eindeutigen Ident-Nummer - setzt sich normalerweise aus Geburtsdatum und Geschlecht (3/4) zusammen, kann in Einzelfällen aber von diesem Schema abweichen
 * @member {String} identNrTeil1
 */
LehrerPersonaldaten.prototype['identNrTeil1'] = undefined;

/**
 * Der hintere Teil der Ident-Nummer – wird üblicherweise NRW-weit fortlaufend vergeben
 * @member {String} identNrTeil2SerNr
 */
LehrerPersonaldaten.prototype['identNrTeil2SerNr'] = undefined;

/**
 * Die Personalaktennummer des Lehrers für den Export zu GPC
 * @member {String} personalaktennummer
 */
LehrerPersonaldaten.prototype['personalaktennummer'] = undefined;

/**
 * Die Personalnummer des LBV
 * @member {String} lbvPersonalnummer
 */
LehrerPersonaldaten.prototype['lbvPersonalnummer'] = undefined;

/**
 * Der zur Personalnummer gehörige Vergütungsschlüssel
 * @member {String} lbvVerguetungsschluessel
 */
LehrerPersonaldaten.prototype['lbvVerguetungsschluessel'] = undefined;

/**
 * Das Datum, wann der Lehrer an die Schule gekommen ist
 * @member {String} zugangsdatum
 */
LehrerPersonaldaten.prototype['zugangsdatum'] = undefined;

/**
 * Der Grund für den Zugang des Lehrers - siehe Statistik-Katalog
 * @member {String} zugangsgrund
 */
LehrerPersonaldaten.prototype['zugangsgrund'] = undefined;

/**
 * Das Datum, wann der Lehrer an die Schule verlassen hat
 * @member {String} abgangsdatum
 */
LehrerPersonaldaten.prototype['abgangsdatum'] = undefined;

/**
 * Der Grund für den Abgang des Lehrers - siehe Statistik-Katalog
 * @member {String} abgangsgrund
 */
LehrerPersonaldaten.prototype['abgangsgrund'] = undefined;

/**
 * Die Leitungsfunktion innerhalb der Schule - siehe Statistik-Katalog
 * @member {String} leitungsfunktion
 */
LehrerPersonaldaten.prototype['leitungsfunktion'] = undefined;

/**
 * Das Pflichtstundensoll des Lehrers
 * @member {Number} pflichtstundensoll
 */
LehrerPersonaldaten.prototype['pflichtstundensoll'] = undefined;

/**
 * Das Rechtsverhältnis unter welchem der Lehrer beschäftigt ist (z.B. Beamter auf Lebenszeit) - siehe Statistik-Katalog
 * @member {String} rechtsverhaeltnis
 */
LehrerPersonaldaten.prototype['rechtsverhaeltnis'] = undefined;

/**
 * Die Art der Beschäftigung (Vollzeit, Teilzeit, etc.) - siehe Statistik-Katalog
 * @member {String} beschaeftigungsart
 */
LehrerPersonaldaten.prototype['beschaeftigungsart'] = undefined;

/**
 * Der Einsatzstatus (z.B. Stammschule, nur hier tätig) - siehe Statistik-Katalog
 * @member {String} einsatzstatus
 */
LehrerPersonaldaten.prototype['einsatzstatus'] = undefined;

/**
 * Die Schulnummer der Stammschule, sofern diese abweicht
 * @member {String} stammschulnummer
 */
LehrerPersonaldaten.prototype['stammschulnummer'] = undefined;

/**
 * Gibt an, ob ein Nachweis über die Masern-Impfung erbracht wurde
 * @member {Boolean} masernImpfnachweis
 */
LehrerPersonaldaten.prototype['masernImpfnachweis'] = undefined;






export default LehrerPersonaldaten;

