/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SchuelerStammdaten model module.
 * @module model/SchuelerStammdaten
 * @version 1.0.0
 */
class SchuelerStammdaten {
    /**
     * Constructs a new <code>SchuelerStammdaten</code>.
     * Die Stammdaten eines Schüler-Eintrags.
     * @alias module:model/SchuelerStammdaten
     * @param id {Number} die ID
     * @param foto {String} ggf. das Foto des Schülers (jpg, Base64-kodiert)
     * @param nachname {String} der Nachname
     * @param zusatzNachname {String} ggf. ein Zusatz zum Nachnamen
     * @param vorname {String} der Vorname
     * @param alleVornamen {String} alle Vornamen, sofern es mehrere gibt, sonst erfolgt der Zugriff nur auf Vorname
     * @param geschlecht {module:model/SchuelerStammdaten.GeschlechtEnum} das Geschlecht
     * @param geburtsdatum {String} das Geburtsdatum
     * @param geburtsname {String} ggf. der Geburtsname
     * @param druckeKonfessionAufZeugnisse {Boolean} gibt an, ob die Konfession des Schülers auf dem Zeugnis erscheinen soll oder nicht.
     * @param religionabmeldung {String} das Datum der Religionsabmeldung
     * @param religionanmeldung {String} das Datum der Religionsanmeldung
     * @param hatMigrationshintergrund {Boolean} gibt an, ob ein Migrationshintergrund vorhanden ist
     * @param zuzugsjahr {String} ggf. das Zuzugsjahr
     * @param geburtsland {String} ggf. das Geburtsland
     * @param verkehrspracheFamilie {String} ggf. die in der Familie hauptsächlich gesprochen Sprache
     * @param geburtslandVater {String} ggf. das Geburtsland des Vaters
     * @param geburtslandMutter {String} ggf. das Geburtsland der Mutter
     * @param foerderschwerpunktID {Number} ggf. die ID eines sonderpädagogischen Förderschwerpunnktes
     * @param foerderschwerpunkt2ID {Number} ggf. die ID eines zweiten sonderpädagogischen Förderschwerpunnktes
     * @param istAOSF {Boolean} gibt an, ob eine sonderpädagogische Förderung nach AOSF vorliegt oder nicht
     * @param istLernenZieldifferent {Boolean} gibt an, ob zieldifferentes Lernen vorliegt oder nicht
     * @param status {module:model/SchuelerStammdaten.StatusEnum} der aktuelle Schülerstatus
     * @param fahrschuelerArtID {Number} ggf. die ID der Art des Fahrschülers
     * @param haltestelleID {Number} ggf. die ID der Haltestelle, ab der der Schüler das Transportmittel nimmt
     * @param anmeldedatum {String} das Anmeldedatum
     * @param aufnahmedatum {String} das Aufnahmedatum
     * @param istVolljaehrig {Boolean} gibt an, ob der Schüler volljährig ist oder nicht
     * @param istSchulpflichtErfuellt {Boolean} gibt an, ob der Schüler die Schulpflicht erfüllt hat oder nicht
     * @param istBerufsschulpflichtErfuellt {Boolean} gibt an, ob der Schüler die Berufsschulpflicht erfüllt hat oder nicht
     * @param hatMasernimpfnachweis {Boolean} gibt an, ob der Schüler einen Nachweis über die Maserimpfpflicht erbracht hat
     * @param keineAuskunftAnDritte {Boolean} gibt an, ob über den Schüler eine Auskunft an dritte erteilt werden darf oder dies unter allen Umständen vermieden werden sollte.
     * @param erhaeltSchuelerBAFOEG {Boolean} gibt an, ob der Schüler BAFÖG erhält oder nicht.
     * @param erhaeltMeisterBAFOEG {Boolean} gibt an, ob der Schüler Meister-BAFÖG erhält oder nicht.
     * @param istDuplikat {Boolean} gibt an, ob es sich bei dem Schülerdatensatz um ein Duplikat handelt oder nicht.
     * @param bemerkungen {String} ggf. Bermerkungen
     */
    constructor(id, foto, nachname, zusatzNachname, vorname, alleVornamen, geschlecht, geburtsdatum, geburtsname, druckeKonfessionAufZeugnisse, religionabmeldung, religionanmeldung, hatMigrationshintergrund, zuzugsjahr, geburtsland, verkehrspracheFamilie, geburtslandVater, geburtslandMutter, foerderschwerpunktID, foerderschwerpunkt2ID, istAOSF, istLernenZieldifferent, status, fahrschuelerArtID, haltestelleID, anmeldedatum, aufnahmedatum, istVolljaehrig, istSchulpflichtErfuellt, istBerufsschulpflichtErfuellt, hatMasernimpfnachweis, keineAuskunftAnDritte, erhaeltSchuelerBAFOEG, erhaeltMeisterBAFOEG, istDuplikat, bemerkungen) { 
        
        SchuelerStammdaten.initialize(this, id, foto, nachname, zusatzNachname, vorname, alleVornamen, geschlecht, geburtsdatum, geburtsname, druckeKonfessionAufZeugnisse, religionabmeldung, religionanmeldung, hatMigrationshintergrund, zuzugsjahr, geburtsland, verkehrspracheFamilie, geburtslandVater, geburtslandMutter, foerderschwerpunktID, foerderschwerpunkt2ID, istAOSF, istLernenZieldifferent, status, fahrschuelerArtID, haltestelleID, anmeldedatum, aufnahmedatum, istVolljaehrig, istSchulpflichtErfuellt, istBerufsschulpflichtErfuellt, hatMasernimpfnachweis, keineAuskunftAnDritte, erhaeltSchuelerBAFOEG, erhaeltMeisterBAFOEG, istDuplikat, bemerkungen);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, foto, nachname, zusatzNachname, vorname, alleVornamen, geschlecht, geburtsdatum, geburtsname, druckeKonfessionAufZeugnisse, religionabmeldung, religionanmeldung, hatMigrationshintergrund, zuzugsjahr, geburtsland, verkehrspracheFamilie, geburtslandVater, geburtslandMutter, foerderschwerpunktID, foerderschwerpunkt2ID, istAOSF, istLernenZieldifferent, status, fahrschuelerArtID, haltestelleID, anmeldedatum, aufnahmedatum, istVolljaehrig, istSchulpflichtErfuellt, istBerufsschulpflichtErfuellt, hatMasernimpfnachweis, keineAuskunftAnDritte, erhaeltSchuelerBAFOEG, erhaeltMeisterBAFOEG, istDuplikat, bemerkungen) { 
        obj['id'] = id;
        obj['foto'] = foto;
        obj['nachname'] = nachname;
        obj['zusatzNachname'] = zusatzNachname;
        obj['vorname'] = vorname;
        obj['alleVornamen'] = alleVornamen;
        obj['geschlecht'] = geschlecht;
        obj['geburtsdatum'] = geburtsdatum;
        obj['geburtsname'] = geburtsname;
        obj['druckeKonfessionAufZeugnisse'] = druckeKonfessionAufZeugnisse;
        obj['religionabmeldung'] = religionabmeldung;
        obj['religionanmeldung'] = religionanmeldung;
        obj['hatMigrationshintergrund'] = hatMigrationshintergrund;
        obj['zuzugsjahr'] = zuzugsjahr;
        obj['geburtsland'] = geburtsland;
        obj['verkehrspracheFamilie'] = verkehrspracheFamilie;
        obj['geburtslandVater'] = geburtslandVater;
        obj['geburtslandMutter'] = geburtslandMutter;
        obj['foerderschwerpunktID'] = foerderschwerpunktID;
        obj['foerderschwerpunkt2ID'] = foerderschwerpunkt2ID;
        obj['istAOSF'] = istAOSF;
        obj['istLernenZieldifferent'] = istLernenZieldifferent;
        obj['status'] = status;
        obj['fahrschuelerArtID'] = fahrschuelerArtID;
        obj['haltestelleID'] = haltestelleID;
        obj['anmeldedatum'] = anmeldedatum;
        obj['aufnahmedatum'] = aufnahmedatum;
        obj['istVolljaehrig'] = istVolljaehrig;
        obj['istSchulpflichtErfuellt'] = istSchulpflichtErfuellt;
        obj['istBerufsschulpflichtErfuellt'] = istBerufsschulpflichtErfuellt;
        obj['hatMasernimpfnachweis'] = hatMasernimpfnachweis;
        obj['keineAuskunftAnDritte'] = keineAuskunftAnDritte;
        obj['erhaeltSchuelerBAFOEG'] = erhaeltSchuelerBAFOEG;
        obj['erhaeltMeisterBAFOEG'] = erhaeltMeisterBAFOEG;
        obj['istDuplikat'] = istDuplikat;
        obj['bemerkungen'] = bemerkungen;
    }

    /**
     * Constructs a <code>SchuelerStammdaten</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchuelerStammdaten} obj Optional instance to populate.
     * @return {module:model/SchuelerStammdaten} The populated <code>SchuelerStammdaten</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchuelerStammdaten();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('foto')) {
                obj['foto'] = ApiClient.convertToType(data['foto'], 'String');
            }
            if (data.hasOwnProperty('nachname')) {
                obj['nachname'] = ApiClient.convertToType(data['nachname'], 'String');
            }
            if (data.hasOwnProperty('zusatzNachname')) {
                obj['zusatzNachname'] = ApiClient.convertToType(data['zusatzNachname'], 'String');
            }
            if (data.hasOwnProperty('vorname')) {
                obj['vorname'] = ApiClient.convertToType(data['vorname'], 'String');
            }
            if (data.hasOwnProperty('alleVornamen')) {
                obj['alleVornamen'] = ApiClient.convertToType(data['alleVornamen'], 'String');
            }
            if (data.hasOwnProperty('geschlecht')) {
                obj['geschlecht'] = ApiClient.convertToType(data['geschlecht'], 'String');
            }
            if (data.hasOwnProperty('geburtsdatum')) {
                obj['geburtsdatum'] = ApiClient.convertToType(data['geburtsdatum'], 'String');
            }
            if (data.hasOwnProperty('geburtsort')) {
                obj['geburtsort'] = ApiClient.convertToType(data['geburtsort'], 'String');
            }
            if (data.hasOwnProperty('geburtsname')) {
                obj['geburtsname'] = ApiClient.convertToType(data['geburtsname'], 'String');
            }
            if (data.hasOwnProperty('strasse')) {
                obj['strasse'] = ApiClient.convertToType(data['strasse'], 'String');
            }
            if (data.hasOwnProperty('wohnortID')) {
                obj['wohnortID'] = ApiClient.convertToType(data['wohnortID'], 'Number');
            }
            if (data.hasOwnProperty('ortsteilID')) {
                obj['ortsteilID'] = ApiClient.convertToType(data['ortsteilID'], 'Number');
            }
            if (data.hasOwnProperty('telefon')) {
                obj['telefon'] = ApiClient.convertToType(data['telefon'], 'String');
            }
            if (data.hasOwnProperty('telefonMobil')) {
                obj['telefonMobil'] = ApiClient.convertToType(data['telefonMobil'], 'String');
            }
            if (data.hasOwnProperty('emailPrivat')) {
                obj['emailPrivat'] = ApiClient.convertToType(data['emailPrivat'], 'String');
            }
            if (data.hasOwnProperty('emailSchule')) {
                obj['emailSchule'] = ApiClient.convertToType(data['emailSchule'], 'String');
            }
            if (data.hasOwnProperty('staatsangehoerigkeitID')) {
                obj['staatsangehoerigkeitID'] = ApiClient.convertToType(data['staatsangehoerigkeitID'], 'String');
            }
            if (data.hasOwnProperty('staatsangehoerigkeit2ID')) {
                obj['staatsangehoerigkeit2ID'] = ApiClient.convertToType(data['staatsangehoerigkeit2ID'], 'String');
            }
            if (data.hasOwnProperty('religionID')) {
                obj['religionID'] = ApiClient.convertToType(data['religionID'], 'Number');
            }
            if (data.hasOwnProperty('druckeKonfessionAufZeugnisse')) {
                obj['druckeKonfessionAufZeugnisse'] = ApiClient.convertToType(data['druckeKonfessionAufZeugnisse'], 'Boolean');
            }
            if (data.hasOwnProperty('religionabmeldung')) {
                obj['religionabmeldung'] = ApiClient.convertToType(data['religionabmeldung'], 'String');
            }
            if (data.hasOwnProperty('religionanmeldung')) {
                obj['religionanmeldung'] = ApiClient.convertToType(data['religionanmeldung'], 'String');
            }
            if (data.hasOwnProperty('hatMigrationshintergrund')) {
                obj['hatMigrationshintergrund'] = ApiClient.convertToType(data['hatMigrationshintergrund'], 'Boolean');
            }
            if (data.hasOwnProperty('zuzugsjahr')) {
                obj['zuzugsjahr'] = ApiClient.convertToType(data['zuzugsjahr'], 'String');
            }
            if (data.hasOwnProperty('geburtsland')) {
                obj['geburtsland'] = ApiClient.convertToType(data['geburtsland'], 'String');
            }
            if (data.hasOwnProperty('verkehrspracheFamilie')) {
                obj['verkehrspracheFamilie'] = ApiClient.convertToType(data['verkehrspracheFamilie'], 'String');
            }
            if (data.hasOwnProperty('geburtslandVater')) {
                obj['geburtslandVater'] = ApiClient.convertToType(data['geburtslandVater'], 'String');
            }
            if (data.hasOwnProperty('geburtslandMutter')) {
                obj['geburtslandMutter'] = ApiClient.convertToType(data['geburtslandMutter'], 'String');
            }
            if (data.hasOwnProperty('foerderschwerpunktID')) {
                obj['foerderschwerpunktID'] = ApiClient.convertToType(data['foerderschwerpunktID'], 'Number');
            }
            if (data.hasOwnProperty('foerderschwerpunkt2ID')) {
                obj['foerderschwerpunkt2ID'] = ApiClient.convertToType(data['foerderschwerpunkt2ID'], 'Number');
            }
            if (data.hasOwnProperty('istAOSF')) {
                obj['istAOSF'] = ApiClient.convertToType(data['istAOSF'], 'Boolean');
            }
            if (data.hasOwnProperty('istLernenZieldifferent')) {
                obj['istLernenZieldifferent'] = ApiClient.convertToType(data['istLernenZieldifferent'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('fahrschuelerArtID')) {
                obj['fahrschuelerArtID'] = ApiClient.convertToType(data['fahrschuelerArtID'], 'Number');
            }
            if (data.hasOwnProperty('haltestelleID')) {
                obj['haltestelleID'] = ApiClient.convertToType(data['haltestelleID'], 'Number');
            }
            if (data.hasOwnProperty('anmeldedatum')) {
                obj['anmeldedatum'] = ApiClient.convertToType(data['anmeldedatum'], 'String');
            }
            if (data.hasOwnProperty('aufnahmedatum')) {
                obj['aufnahmedatum'] = ApiClient.convertToType(data['aufnahmedatum'], 'String');
            }
            if (data.hasOwnProperty('istVolljaehrig')) {
                obj['istVolljaehrig'] = ApiClient.convertToType(data['istVolljaehrig'], 'Boolean');
            }
            if (data.hasOwnProperty('istSchulpflichtErfuellt')) {
                obj['istSchulpflichtErfuellt'] = ApiClient.convertToType(data['istSchulpflichtErfuellt'], 'Boolean');
            }
            if (data.hasOwnProperty('istBerufsschulpflichtErfuellt')) {
                obj['istBerufsschulpflichtErfuellt'] = ApiClient.convertToType(data['istBerufsschulpflichtErfuellt'], 'Boolean');
            }
            if (data.hasOwnProperty('hatMasernimpfnachweis')) {
                obj['hatMasernimpfnachweis'] = ApiClient.convertToType(data['hatMasernimpfnachweis'], 'Boolean');
            }
            if (data.hasOwnProperty('keineAuskunftAnDritte')) {
                obj['keineAuskunftAnDritte'] = ApiClient.convertToType(data['keineAuskunftAnDritte'], 'Boolean');
            }
            if (data.hasOwnProperty('erhaeltSchuelerBAFOEG')) {
                obj['erhaeltSchuelerBAFOEG'] = ApiClient.convertToType(data['erhaeltSchuelerBAFOEG'], 'Boolean');
            }
            if (data.hasOwnProperty('erhaeltMeisterBAFOEG')) {
                obj['erhaeltMeisterBAFOEG'] = ApiClient.convertToType(data['erhaeltMeisterBAFOEG'], 'Boolean');
            }
            if (data.hasOwnProperty('istDuplikat')) {
                obj['istDuplikat'] = ApiClient.convertToType(data['istDuplikat'], 'Boolean');
            }
            if (data.hasOwnProperty('bemerkungen')) {
                obj['bemerkungen'] = ApiClient.convertToType(data['bemerkungen'], 'String');
            }
        }
        return obj;
    }


}

/**
 * die ID
 * @member {Number} id
 */
SchuelerStammdaten.prototype['id'] = undefined;

/**
 * ggf. das Foto des Schülers (jpg, Base64-kodiert)
 * @member {String} foto
 */
SchuelerStammdaten.prototype['foto'] = undefined;

/**
 * der Nachname
 * @member {String} nachname
 */
SchuelerStammdaten.prototype['nachname'] = undefined;

/**
 * ggf. ein Zusatz zum Nachnamen
 * @member {String} zusatzNachname
 */
SchuelerStammdaten.prototype['zusatzNachname'] = undefined;

/**
 * der Vorname
 * @member {String} vorname
 */
SchuelerStammdaten.prototype['vorname'] = undefined;

/**
 * alle Vornamen, sofern es mehrere gibt, sonst erfolgt der Zugriff nur auf Vorname
 * @member {String} alleVornamen
 */
SchuelerStammdaten.prototype['alleVornamen'] = undefined;

/**
 * das Geschlecht
 * @member {module:model/SchuelerStammdaten.GeschlechtEnum} geschlecht
 */
SchuelerStammdaten.prototype['geschlecht'] = undefined;

/**
 * das Geburtsdatum
 * @member {String} geburtsdatum
 */
SchuelerStammdaten.prototype['geburtsdatum'] = undefined;

/**
 * der Geburtsort
 * @member {String} geburtsort
 */
SchuelerStammdaten.prototype['geburtsort'] = undefined;

/**
 * ggf. der Geburtsname
 * @member {String} geburtsname
 */
SchuelerStammdaten.prototype['geburtsname'] = undefined;

/**
 * ggf. die Straße im Wohnort
 * @member {String} strasse
 */
SchuelerStammdaten.prototype['strasse'] = undefined;

/**
 * ggf. die ID des Wohnortes
 * @member {Number} wohnortID
 */
SchuelerStammdaten.prototype['wohnortID'] = undefined;

/**
 * ggf. die ID des Ortsteils im Wohnort
 * @member {Number} ortsteilID
 */
SchuelerStammdaten.prototype['ortsteilID'] = undefined;

/**
 * ggf. die Telefonnummer
 * @member {String} telefon
 */
SchuelerStammdaten.prototype['telefon'] = undefined;

/**
 * ggf. die Mobilnummer
 * @member {String} telefonMobil
 */
SchuelerStammdaten.prototype['telefonMobil'] = undefined;

/**
 * ggf. die private Email-Adresse
 * @member {String} emailPrivat
 */
SchuelerStammdaten.prototype['emailPrivat'] = undefined;

/**
 * ggf. die schulische Email-Adresse
 * @member {String} emailSchule
 */
SchuelerStammdaten.prototype['emailSchule'] = undefined;

/**
 * die ID der Staatsangehörigkeit
 * @member {String} staatsangehoerigkeitID
 */
SchuelerStammdaten.prototype['staatsangehoerigkeitID'] = undefined;

/**
 * ggf. die ID einer zweiten Staatsangehörigkeit
 * @member {String} staatsangehoerigkeit2ID
 */
SchuelerStammdaten.prototype['staatsangehoerigkeit2ID'] = undefined;

/**
 * ggf. die ID der Religion
 * @member {Number} religionID
 */
SchuelerStammdaten.prototype['religionID'] = undefined;

/**
 * gibt an, ob die Konfession des Schülers auf dem Zeugnis erscheinen soll oder nicht.
 * @member {Boolean} druckeKonfessionAufZeugnisse
 */
SchuelerStammdaten.prototype['druckeKonfessionAufZeugnisse'] = undefined;

/**
 * das Datum der Religionsabmeldung
 * @member {String} religionabmeldung
 */
SchuelerStammdaten.prototype['religionabmeldung'] = undefined;

/**
 * das Datum der Religionsanmeldung
 * @member {String} religionanmeldung
 */
SchuelerStammdaten.prototype['religionanmeldung'] = undefined;

/**
 * gibt an, ob ein Migrationshintergrund vorhanden ist
 * @member {Boolean} hatMigrationshintergrund
 */
SchuelerStammdaten.prototype['hatMigrationshintergrund'] = undefined;

/**
 * ggf. das Zuzugsjahr
 * @member {String} zuzugsjahr
 */
SchuelerStammdaten.prototype['zuzugsjahr'] = undefined;

/**
 * ggf. das Geburtsland
 * @member {String} geburtsland
 */
SchuelerStammdaten.prototype['geburtsland'] = undefined;

/**
 * ggf. die in der Familie hauptsächlich gesprochen Sprache
 * @member {String} verkehrspracheFamilie
 */
SchuelerStammdaten.prototype['verkehrspracheFamilie'] = undefined;

/**
 * ggf. das Geburtsland des Vaters
 * @member {String} geburtslandVater
 */
SchuelerStammdaten.prototype['geburtslandVater'] = undefined;

/**
 * ggf. das Geburtsland der Mutter
 * @member {String} geburtslandMutter
 */
SchuelerStammdaten.prototype['geburtslandMutter'] = undefined;

/**
 * ggf. die ID eines sonderpädagogischen Förderschwerpunnktes
 * @member {Number} foerderschwerpunktID
 */
SchuelerStammdaten.prototype['foerderschwerpunktID'] = undefined;

/**
 * ggf. die ID eines zweiten sonderpädagogischen Förderschwerpunnktes
 * @member {Number} foerderschwerpunkt2ID
 */
SchuelerStammdaten.prototype['foerderschwerpunkt2ID'] = undefined;

/**
 * gibt an, ob eine sonderpädagogische Förderung nach AOSF vorliegt oder nicht
 * @member {Boolean} istAOSF
 */
SchuelerStammdaten.prototype['istAOSF'] = undefined;

/**
 * gibt an, ob zieldifferentes Lernen vorliegt oder nicht
 * @member {Boolean} istLernenZieldifferent
 */
SchuelerStammdaten.prototype['istLernenZieldifferent'] = undefined;

/**
 * der aktuelle Schülerstatus
 * @member {module:model/SchuelerStammdaten.StatusEnum} status
 */
SchuelerStammdaten.prototype['status'] = undefined;

/**
 * ggf. die ID der Art des Fahrschülers
 * @member {Number} fahrschuelerArtID
 */
SchuelerStammdaten.prototype['fahrschuelerArtID'] = undefined;

/**
 * ggf. die ID der Haltestelle, ab der der Schüler das Transportmittel nimmt
 * @member {Number} haltestelleID
 */
SchuelerStammdaten.prototype['haltestelleID'] = undefined;

/**
 * das Anmeldedatum
 * @member {String} anmeldedatum
 */
SchuelerStammdaten.prototype['anmeldedatum'] = undefined;

/**
 * das Aufnahmedatum
 * @member {String} aufnahmedatum
 */
SchuelerStammdaten.prototype['aufnahmedatum'] = undefined;

/**
 * gibt an, ob der Schüler volljährig ist oder nicht
 * @member {Boolean} istVolljaehrig
 */
SchuelerStammdaten.prototype['istVolljaehrig'] = undefined;

/**
 * gibt an, ob der Schüler die Schulpflicht erfüllt hat oder nicht
 * @member {Boolean} istSchulpflichtErfuellt
 */
SchuelerStammdaten.prototype['istSchulpflichtErfuellt'] = undefined;

/**
 * gibt an, ob der Schüler die Berufsschulpflicht erfüllt hat oder nicht
 * @member {Boolean} istBerufsschulpflichtErfuellt
 */
SchuelerStammdaten.prototype['istBerufsschulpflichtErfuellt'] = undefined;

/**
 * gibt an, ob der Schüler einen Nachweis über die Maserimpfpflicht erbracht hat
 * @member {Boolean} hatMasernimpfnachweis
 */
SchuelerStammdaten.prototype['hatMasernimpfnachweis'] = undefined;

/**
 * gibt an, ob über den Schüler eine Auskunft an dritte erteilt werden darf oder dies unter allen Umständen vermieden werden sollte.
 * @member {Boolean} keineAuskunftAnDritte
 */
SchuelerStammdaten.prototype['keineAuskunftAnDritte'] = undefined;

/**
 * gibt an, ob der Schüler BAFÖG erhält oder nicht.
 * @member {Boolean} erhaeltSchuelerBAFOEG
 */
SchuelerStammdaten.prototype['erhaeltSchuelerBAFOEG'] = undefined;

/**
 * gibt an, ob der Schüler Meister-BAFÖG erhält oder nicht.
 * @member {Boolean} erhaeltMeisterBAFOEG
 */
SchuelerStammdaten.prototype['erhaeltMeisterBAFOEG'] = undefined;

/**
 * gibt an, ob es sich bei dem Schülerdatensatz um ein Duplikat handelt oder nicht.
 * @member {Boolean} istDuplikat
 */
SchuelerStammdaten.prototype['istDuplikat'] = undefined;

/**
 * ggf. Bermerkungen
 * @member {String} bemerkungen
 */
SchuelerStammdaten.prototype['bemerkungen'] = undefined;





/**
 * Allowed values for the <code>geschlecht</code> property.
 * @enum {String}
 * @readonly
 */
SchuelerStammdaten['GeschlechtEnum'] = {

    /**
     * value: "M"
     * @const
     */
    "M": "M",

    /**
     * value: "W"
     * @const
     */
    "W": "W",

    /**
     * value: "D"
     * @const
     */
    "D": "D",

    /**
     * value: "OHNE_ANGABE"
     * @const
     */
    "OHNE_ANGABE": "OHNE_ANGABE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SchuelerStammdaten['StatusEnum'] = {

    /**
     * value: "NEUAUFNAHME"
     * @const
     */
    "NEUAUFNAHME": "NEUAUFNAHME",

    /**
     * value: "WARTELISTE"
     * @const
     */
    "WARTELISTE": "WARTELISTE",

    /**
     * value: "AKTIV"
     * @const
     */
    "AKTIV": "AKTIV",

    /**
     * value: "BEURLAUBT"
     * @const
     */
    "BEURLAUBT": "BEURLAUBT",

    /**
     * value: "EXTERN"
     * @const
     */
    "EXTERN": "EXTERN",

    /**
     * value: "ABSCHLUSS"
     * @const
     */
    "ABSCHLUSS": "ABSCHLUSS",

    /**
     * value: "ABGAENGER"
     * @const
     */
    "ABGAENGER": "ABGAENGER"
};



export default SchuelerStammdaten;

