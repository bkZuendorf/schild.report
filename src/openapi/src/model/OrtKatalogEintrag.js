/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrtKatalogEintrag model module.
 * @module model/OrtKatalogEintrag
 * @version 1.0.0
 */
class OrtKatalogEintrag {
    /**
     * Constructs a new <code>OrtKatalogEintrag</code>.
     * ein Eintrag in dem Katalog der Orte.
     * @alias module:model/OrtKatalogEintrag
     * @param id {Number} die ID des Katalog-Eintrags
     * @param plz {String} die Postleitzahl
     * @param ortsname {String} der Name des Ortes
     * @param sortierung {Number} gibt die Position in der Sortierreihenfolge für die Katalog-Einträge an.
     * @param istSichtbar {Boolean} gibt an, ob der Eintrag in der Anwendung sichtbar sein soll oder nicht.
     * @param istAenderbar {Boolean} gibt an, ob der Eintrag in der Anwendung änderbar sein soll oder nicht.
     */
    constructor(id, plz, ortsname, sortierung, istSichtbar, istAenderbar) { 
        
        OrtKatalogEintrag.initialize(this, id, plz, ortsname, sortierung, istSichtbar, istAenderbar);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, plz, ortsname, sortierung, istSichtbar, istAenderbar) { 
        obj['id'] = id;
        obj['plz'] = plz;
        obj['ortsname'] = ortsname;
        obj['sortierung'] = sortierung;
        obj['istSichtbar'] = istSichtbar;
        obj['istAenderbar'] = istAenderbar;
    }

    /**
     * Constructs a <code>OrtKatalogEintrag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrtKatalogEintrag} obj Optional instance to populate.
     * @return {module:model/OrtKatalogEintrag} The populated <code>OrtKatalogEintrag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrtKatalogEintrag();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('plz')) {
                obj['plz'] = ApiClient.convertToType(data['plz'], 'String');
            }
            if (data.hasOwnProperty('ortsname')) {
                obj['ortsname'] = ApiClient.convertToType(data['ortsname'], 'String');
            }
            if (data.hasOwnProperty('kreis')) {
                obj['kreis'] = ApiClient.convertToType(data['kreis'], 'String');
            }
            if (data.hasOwnProperty('kuerzelBundesland')) {
                obj['kuerzelBundesland'] = ApiClient.convertToType(data['kuerzelBundesland'], 'String');
            }
            if (data.hasOwnProperty('sortierung')) {
                obj['sortierung'] = ApiClient.convertToType(data['sortierung'], 'Number');
            }
            if (data.hasOwnProperty('istSichtbar')) {
                obj['istSichtbar'] = ApiClient.convertToType(data['istSichtbar'], 'Boolean');
            }
            if (data.hasOwnProperty('istAenderbar')) {
                obj['istAenderbar'] = ApiClient.convertToType(data['istAenderbar'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * die ID des Katalog-Eintrags
 * @member {Number} id
 */
OrtKatalogEintrag.prototype['id'] = undefined;

/**
 * die Postleitzahl
 * @member {String} plz
 */
OrtKatalogEintrag.prototype['plz'] = undefined;

/**
 * der Name des Ortes
 * @member {String} ortsname
 */
OrtKatalogEintrag.prototype['ortsname'] = undefined;

/**
 * der Name des Kreises
 * @member {String} kreis
 */
OrtKatalogEintrag.prototype['kreis'] = undefined;

/**
 * der Kürzel des Bundeslandes
 * @member {String} kuerzelBundesland
 */
OrtKatalogEintrag.prototype['kuerzelBundesland'] = undefined;

/**
 * gibt die Position in der Sortierreihenfolge für die Katalog-Einträge an.
 * @member {Number} sortierung
 */
OrtKatalogEintrag.prototype['sortierung'] = undefined;

/**
 * gibt an, ob der Eintrag in der Anwendung sichtbar sein soll oder nicht.
 * @member {Boolean} istSichtbar
 */
OrtKatalogEintrag.prototype['istSichtbar'] = undefined;

/**
 * gibt an, ob der Eintrag in der Anwendung änderbar sein soll oder nicht.
 * @member {Boolean} istAenderbar
 */
OrtKatalogEintrag.prototype['istAenderbar'] = undefined;






export default OrtKatalogEintrag;

