/**
 * SVWSOpenAPI
 * Ein Server für die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbiturFachbelegung from './AbiturFachbelegung';
import Sprachenfolge from './Sprachenfolge';

/**
 * The Abiturdaten model module.
 * @module model/Abiturdaten
 * @version 1.0.0
 */
class Abiturdaten {
    /**
     * Constructs a new <code>Abiturdaten</code>.
     * enthält die Informationen der gymnasialen Oberstufe eines Schülers in Bezug auf das Abitur.
     * @alias module:model/Abiturdaten
     * @param schuelerId {Number} Die eindeutige ID des Schülers.
     * @param schuljahrAbitur {Number} Das Schuljahr, in dem der Schüler sein Abitur ablegt bzw. ablegen wird.
     * @param fachbelegungen {Array.<module:model/AbiturFachbelegung>} 
     * @param freiwilligerRuecktritt {Boolean} Gibt an, ob freiwillig von der Abiturprüfung zurückgetreten wurde.
     */
    constructor(schuelerId, schuljahrAbitur, fachbelegungen, freiwilligerRuecktritt) { 
        
        Abiturdaten.initialize(this, schuelerId, schuljahrAbitur, fachbelegungen, freiwilligerRuecktritt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schuelerId, schuljahrAbitur, fachbelegungen, freiwilligerRuecktritt) { 
        obj['schueler_id'] = schuelerId;
        obj['schuljahr_abitur'] = schuljahrAbitur;
        obj['fachbelegungen'] = fachbelegungen;
        obj['freiwilligerRuecktritt'] = freiwilligerRuecktritt;
    }

    /**
     * Constructs a <code>Abiturdaten</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Abiturdaten} obj Optional instance to populate.
     * @return {module:model/Abiturdaten} The populated <code>Abiturdaten</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Abiturdaten();

            if (data.hasOwnProperty('schueler_id')) {
                obj['schueler_id'] = ApiClient.convertToType(data['schueler_id'], 'Number');
            }
            if (data.hasOwnProperty('schuljahr_abitur')) {
                obj['schuljahr_abitur'] = ApiClient.convertToType(data['schuljahr_abitur'], 'Number');
            }
            if (data.hasOwnProperty('fachbelegungen')) {
                obj['fachbelegungen'] = ApiClient.convertToType(data['fachbelegungen'], [AbiturFachbelegung]);
            }
            if (data.hasOwnProperty('sprachenfolge')) {
                obj['sprachenfolge'] = Sprachenfolge.constructFromObject(data['sprachenfolge']);
            }
            if (data.hasOwnProperty('bilingualeSprache')) {
                obj['bilingualeSprache'] = ApiClient.convertToType(data['bilingualeSprache'], 'String');
            }
            if (data.hasOwnProperty('sek1Fremdsprache2ManuellGeprueft')) {
                obj['sek1Fremdsprache2ManuellGeprueft'] = ApiClient.convertToType(data['sek1Fremdsprache2ManuellGeprueft'], 'Boolean');
            }
            if (data.hasOwnProperty('muttersprachenpruefungEndeEF')) {
                obj['muttersprachenpruefungEndeEF'] = ApiClient.convertToType(data['muttersprachenpruefungEndeEF'], 'Boolean');
            }
            if (data.hasOwnProperty('latinum')) {
                obj['latinum'] = ApiClient.convertToType(data['latinum'], 'Boolean');
            }
            if (data.hasOwnProperty('kleinesLatinum')) {
                obj['kleinesLatinum'] = ApiClient.convertToType(data['kleinesLatinum'], 'Boolean');
            }
            if (data.hasOwnProperty('graecum')) {
                obj['graecum'] = ApiClient.convertToType(data['graecum'], 'Boolean');
            }
            if (data.hasOwnProperty('hebraicum')) {
                obj['hebraicum'] = ApiClient.convertToType(data['hebraicum'], 'Boolean');
            }
            if (data.hasOwnProperty('block1FehlstundenGesamt')) {
                obj['block1FehlstundenGesamt'] = ApiClient.convertToType(data['block1FehlstundenGesamt'], 'Number');
            }
            if (data.hasOwnProperty('block1FehlstundenUnentschuldigt')) {
                obj['block1FehlstundenUnentschuldigt'] = ApiClient.convertToType(data['block1FehlstundenUnentschuldigt'], 'Number');
            }
            if (data.hasOwnProperty('projektKursThema')) {
                obj['projektKursThema'] = ApiClient.convertToType(data['projektKursThema'], 'String');
            }
            if (data.hasOwnProperty('projektkursLeitfach1Kuerzel')) {
                obj['projektkursLeitfach1Kuerzel'] = ApiClient.convertToType(data['projektkursLeitfach1Kuerzel'], 'String');
            }
            if (data.hasOwnProperty('projektkursLeitfach2Kuerzel')) {
                obj['projektkursLeitfach2Kuerzel'] = ApiClient.convertToType(data['projektkursLeitfach2Kuerzel'], 'String');
            }
            if (data.hasOwnProperty('besondereLernleistung')) {
                obj['besondereLernleistung'] = ApiClient.convertToType(data['besondereLernleistung'], 'String');
            }
            if (data.hasOwnProperty('besondereLernleistungPunkte')) {
                obj['besondereLernleistungPunkte'] = ApiClient.convertToType(data['besondereLernleistungPunkte'], 'String');
            }
            if (data.hasOwnProperty('besondereLernleistungThema')) {
                obj['besondereLernleistungThema'] = ApiClient.convertToType(data['besondereLernleistungThema'], 'String');
            }
            if (data.hasOwnProperty('block1AnzahlKurse')) {
                obj['block1AnzahlKurse'] = ApiClient.convertToType(data['block1AnzahlKurse'], 'Number');
            }
            if (data.hasOwnProperty('block1DefiziteGesamt')) {
                obj['block1DefiziteGesamt'] = ApiClient.convertToType(data['block1DefiziteGesamt'], 'Number');
            }
            if (data.hasOwnProperty('block1DefiziteLK')) {
                obj['block1DefiziteLK'] = ApiClient.convertToType(data['block1DefiziteLK'], 'Number');
            }
            if (data.hasOwnProperty('block1PunktSummeGK')) {
                obj['block1PunktSummeGK'] = ApiClient.convertToType(data['block1PunktSummeGK'], 'Number');
            }
            if (data.hasOwnProperty('block1PunktSummeLK')) {
                obj['block1PunktSummeLK'] = ApiClient.convertToType(data['block1PunktSummeLK'], 'Number');
            }
            if (data.hasOwnProperty('block1PunktSummeNormiert')) {
                obj['block1PunktSummeNormiert'] = ApiClient.convertToType(data['block1PunktSummeNormiert'], 'Number');
            }
            if (data.hasOwnProperty('block1NotenpunkteDurchschnitt')) {
                obj['block1NotenpunkteDurchschnitt'] = ApiClient.convertToType(data['block1NotenpunkteDurchschnitt'], 'Number');
            }
            if (data.hasOwnProperty('block1Zulassung')) {
                obj['block1Zulassung'] = ApiClient.convertToType(data['block1Zulassung'], 'Boolean');
            }
            if (data.hasOwnProperty('freiwilligerRuecktritt')) {
                obj['freiwilligerRuecktritt'] = ApiClient.convertToType(data['freiwilligerRuecktritt'], 'Boolean');
            }
            if (data.hasOwnProperty('block2DefiziteGesamt')) {
                obj['block2DefiziteGesamt'] = ApiClient.convertToType(data['block2DefiziteGesamt'], 'Number');
            }
            if (data.hasOwnProperty('block2DefiziteLK')) {
                obj['block2DefiziteLK'] = ApiClient.convertToType(data['block2DefiziteLK'], 'Number');
            }
            if (data.hasOwnProperty('block2PunktSumme')) {
                obj['block2PunktSumme'] = ApiClient.convertToType(data['block2PunktSumme'], 'Number');
            }
            if (data.hasOwnProperty('gesamtPunkte')) {
                obj['gesamtPunkte'] = ApiClient.convertToType(data['gesamtPunkte'], 'Number');
            }
            if (data.hasOwnProperty('gesamtPunkteVerbesserung')) {
                obj['gesamtPunkteVerbesserung'] = ApiClient.convertToType(data['gesamtPunkteVerbesserung'], 'Number');
            }
            if (data.hasOwnProperty('gesamtPunkteVerschlechterung')) {
                obj['gesamtPunkteVerschlechterung'] = ApiClient.convertToType(data['gesamtPunkteVerschlechterung'], 'Number');
            }
            if (data.hasOwnProperty('pruefungBestanden')) {
                obj['pruefungBestanden'] = ApiClient.convertToType(data['pruefungBestanden'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Die eindeutige ID des Schülers.
 * @member {Number} schueler_id
 */
Abiturdaten.prototype['schueler_id'] = undefined;

/**
 * Das Schuljahr, in dem der Schüler sein Abitur ablegt bzw. ablegen wird.
 * @member {Number} schuljahr_abitur
 */
Abiturdaten.prototype['schuljahr_abitur'] = undefined;

/**
 * @member {Array.<module:model/AbiturFachbelegung>} fachbelegungen
 */
Abiturdaten.prototype['fachbelegungen'] = undefined;

/**
 * @member {module:model/Sprachenfolge} sprachenfolge
 */
Abiturdaten.prototype['sprachenfolge'] = undefined;

/**
 * Das einstellige Kürzel der Sprache des bilingualen Bildungsganges, falls der Schüler an einem solchen teilnimmt.
 * @member {String} bilingualeSprache
 */
Abiturdaten.prototype['bilingualeSprache'] = undefined;

/**
 * Gibt an, ob die zweite Fremdsprache in der Sekundarstufe I manuell geprüft wurde und vorhanden ist. Bei einer Belegprüfung muss diese dann nicht anhand der Sprachenfolge geprüft werden.
 * @member {Boolean} sek1Fremdsprache2ManuellGeprueft
 * @default false
 */
Abiturdaten.prototype['sek1Fremdsprache2ManuellGeprueft'] = false;

/**
 * Gibt an, ob am Ende der EF eine Muttersprachliche Prüfung erfolgen wird bzw. erfolgt ist.
 * @member {Boolean} muttersprachenpruefungEndeEF
 * @default false
 */
Abiturdaten.prototype['muttersprachenpruefungEndeEF'] = false;

/**
 * Gibt an, ob das Latinum erworben wurde.
 * @member {Boolean} latinum
 * @default false
 */
Abiturdaten.prototype['latinum'] = false;

/**
 * Gibt an, ob das kleine Latinum erworben wurde.
 * @member {Boolean} kleinesLatinum
 * @default false
 */
Abiturdaten.prototype['kleinesLatinum'] = false;

/**
 * Gibt an, ob das Graecum erworben wurde.
 * @member {Boolean} graecum
 * @default false
 */
Abiturdaten.prototype['graecum'] = false;

/**
 * Gibt an, ob das Hebraicum erworben wurde.
 * @member {Boolean} hebraicum
 * @default false
 */
Abiturdaten.prototype['hebraicum'] = false;

/**
 * Die Anzahl der Fehlstunden in der gesamten Qualifikationsphase.
 * @member {Number} block1FehlstundenGesamt
 * @default 0
 */
Abiturdaten.prototype['block1FehlstundenGesamt'] = 0;

/**
 * Die Anzahl der unentschuldigten Fehlstunden in der gesamten Qualifikationsphase.
 * @member {Number} block1FehlstundenUnentschuldigt
 * @default 0
 */
Abiturdaten.prototype['block1FehlstundenUnentschuldigt'] = 0;

/**
 * Das Projektkursthema, sofern ein Projektkurs belegt wurde.
 * @member {String} projektKursThema
 */
Abiturdaten.prototype['projektKursThema'] = undefined;

/**
 * Das Kürzel des ersten Leitfaches des belegten Projektkurs, sofern einer belegt wurde.
 * @member {String} projektkursLeitfach1Kuerzel
 */
Abiturdaten.prototype['projektkursLeitfach1Kuerzel'] = undefined;

/**
 * Das Kürzel des zweiten Leitfaches des belegten Projektkurs, sofern einer belegt wurde und ein zweites Leitfach für diesen festgelegt wurde.
 * @member {String} projektkursLeitfach2Kuerzel
 */
Abiturdaten.prototype['projektkursLeitfach2Kuerzel'] = undefined;

/**
 * Gibt an, ob eine besondere Lernleistung vorliegt (K - keine, P - in einem Projektkurs, E - extern).
 * @member {module:model/Abiturdaten.BesondereLernleistungEnum} besondereLernleistung
 * @default 'K'
 */
Abiturdaten.prototype['besondereLernleistung'] = 'K';

/**
 * Gibt ggf. die Note einer externen besonderen Lernleistung an.
 * @member {module:model/Abiturdaten.BesondereLernleistungPunkteEnum} besondereLernleistungPunkte
 */
Abiturdaten.prototype['besondereLernleistungPunkte'] = undefined;

/**
 * Gibt das Thema der Besonderen Lernleistung an.
 * @member {String} besondereLernleistungThema
 */
Abiturdaten.prototype['besondereLernleistungThema'] = undefined;

/**
 * Gibt die Anzahl der Kurse in der Qualifikationsphase an.
 * @member {Number} block1AnzahlKurse
 */
Abiturdaten.prototype['block1AnzahlKurse'] = undefined;

/**
 * Gibt die Anzahl der Gesamtdefizite in der Qualifikationsphase an.
 * @member {Number} block1DefiziteGesamt
 */
Abiturdaten.prototype['block1DefiziteGesamt'] = undefined;

/**
 * Gibt die Anzahl der Defizite im LK-Bereich in der Qualifikationsphase an.
 * @member {Number} block1DefiziteLK
 */
Abiturdaten.prototype['block1DefiziteLK'] = undefined;

/**
 * Gibt die Punktsumme aller Grundkurse in der Qualifikationsphase an.
 * @member {Number} block1PunktSummeGK
 */
Abiturdaten.prototype['block1PunktSummeGK'] = undefined;

/**
 * Gibt die Punktsumme aller Leistungskurse in der Qualifikationsphase an.
 * @member {Number} block1PunktSummeLK
 */
Abiturdaten.prototype['block1PunktSummeLK'] = undefined;

/**
 * Gibt die normierte Punktsumme aller Kurse in der Qualifikationsphase an.
 * @member {Number} block1PunktSummeNormiert
 */
Abiturdaten.prototype['block1PunktSummeNormiert'] = undefined;

/**
 * Gibt den Durchschnitt der Notenpunkte von allen Kursen der Qualifikationsphase an.
 * @member {Number} block1NotenpunkteDurchschnitt
 */
Abiturdaten.prototype['block1NotenpunkteDurchschnitt'] = undefined;

/**
 * Gibt an, ob die Zulassung erreicht wurde oder nicht - sofern diese schon geprüft wurde.
 * @member {Boolean} block1Zulassung
 */
Abiturdaten.prototype['block1Zulassung'] = undefined;

/**
 * Gibt an, ob freiwillig von der Abiturprüfung zurückgetreten wurde.
 * @member {Boolean} freiwilligerRuecktritt
 * @default false
 */
Abiturdaten.prototype['freiwilligerRuecktritt'] = false;

/**
 * Gibt die Anzahl der Gesamtdefizite im Abiturbereich (Block II) an.
 * @member {Number} block2DefiziteGesamt
 */
Abiturdaten.prototype['block2DefiziteGesamt'] = undefined;

/**
 * Gibt die Anzahl der Leistungskurs-Defizite im Abiturbereich (Block II) an.
 * @member {Number} block2DefiziteLK
 */
Abiturdaten.prototype['block2DefiziteLK'] = undefined;

/**
 * Gibt die Punktsumme im Abiturbereich (Block II) an.
 * @member {Number} block2PunktSumme
 */
Abiturdaten.prototype['block2PunktSumme'] = undefined;

/**
 * Gibt die erreichte Gesamtpunktzahl in der Qualifikation und im Abiturbereich (Block I und II) an.
 * @member {Number} gesamtPunkte
 */
Abiturdaten.prototype['gesamtPunkte'] = undefined;

/**
 * Gibt die Gesamtpunktzahl an, ab der sich die Abiturnote verbessern würde.
 * @member {Number} gesamtPunkteVerbesserung
 */
Abiturdaten.prototype['gesamtPunkteVerbesserung'] = undefined;

/**
 * Gibt die Gesamtpunktzahl an, ab der sich die Abiturnote verschlechtern würde.
 * @member {Number} gesamtPunkteVerschlechterung
 */
Abiturdaten.prototype['gesamtPunkteVerschlechterung'] = undefined;

/**
 * Gibt an, ob die Abiturprüfung bestanden wurde oder nicht - sofern das Prüfungsverfahren schon abgeschlossen wurde.
 * @member {Boolean} pruefungBestanden
 */
Abiturdaten.prototype['pruefungBestanden'] = undefined;

/**
 * Die Abiturnote einer bestandenen Abiturprüfung - sofern das Prüfungsverfahren schon abgeschlossen wurde.
 * @member {String} note
 */
Abiturdaten.prototype['note'] = undefined;





/**
 * Allowed values for the <code>besondereLernleistung</code> property.
 * @enum {String}
 * @readonly
 */
Abiturdaten['BesondereLernleistungEnum'] = {

    /**
     * value: "K"
     * @const
     */
    "K": "K",

    /**
     * value: "P"
     * @const
     */
    "P": "P",

    /**
     * value: "E"
     * @const
     */
    "E": "E"
};


/**
 * Allowed values for the <code>besondereLernleistungPunkte</code> property.
 * @enum {String}
 * @readonly
 */
Abiturdaten['BesondereLernleistungPunkteEnum'] = {

    /**
     * value: "1P"
     * @const
     */
    "1P": "1P",

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "1M"
     * @const
     */
    "1M": "1M",

    /**
     * value: "2P"
     * @const
     */
    "2P": "2P",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "2M"
     * @const
     */
    "2M": "2M",

    /**
     * value: "3P"
     * @const
     */
    "3P": "3P",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "3M"
     * @const
     */
    "3M": "3M",

    /**
     * value: "4P"
     * @const
     */
    "4P": "4P",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "4M"
     * @const
     */
    "4M": "4M",

    /**
     * value: "5P"
     * @const
     */
    "5P": "5P",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "5M"
     * @const
     */
    "5M": "5M",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "E1"
     * @const
     */
    "E1": "E1",

    /**
     * value: "E2"
     * @const
     */
    "E2": "E2",

    /**
     * value: "E3"
     * @const
     */
    "E3": "E3",

    /**
     * value: "AT"
     * @const
     */
    "AT": "AT",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",

    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",

    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",

    /**
     * value: "LM"
     * @const
     */
    "LM": "LM",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};



export default Abiturdaten;

