/**
 * SVWSOpenAPI
 * Ein Server f√ºr die Bereitstellung der Open-API eines SVWS-Servers und Anwendungen zum Zugriff auf die Daten dieses Servers auf [https://localhost](https://localhost).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbiturFachbelegungHalbjahr from './AbiturFachbelegungHalbjahr';
import GOStFach from './GOStFach';

/**
 * The AbiturFachbelegung model module.
 * @module model/AbiturFachbelegung
 * @version 1.0.0
 */
class AbiturFachbelegung {
    /**
     * Constructs a new <code>AbiturFachbelegung</code>.
     * Ein Array mit den Fachbelegungen in der Oberstufe.
     * @alias module:model/AbiturFachbelegung
     */
    constructor() { 
        
        AbiturFachbelegung.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AbiturFachbelegung</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbiturFachbelegung} obj Optional instance to populate.
     * @return {module:model/AbiturFachbelegung} The populated <code>AbiturFachbelegung</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbiturFachbelegung();

            if (data.hasOwnProperty('fach')) {
                obj['fach'] = GOStFach.constructFromObject(data['fach']);
            }
            if (data.hasOwnProperty('letzteKursart')) {
                obj['letzteKursart'] = ApiClient.convertToType(data['letzteKursart'], 'String');
            }
            if (data.hasOwnProperty('abiturFach')) {
                obj['abiturFach'] = ApiClient.convertToType(data['abiturFach'], 'String');
            }
            if (data.hasOwnProperty('istFSNeu')) {
                obj['istFSNeu'] = ApiClient.convertToType(data['istFSNeu'], 'Boolean');
            }
            if (data.hasOwnProperty('block1PunktSumme')) {
                obj['block1PunktSumme'] = ApiClient.convertToType(data['block1PunktSumme'], 'Number');
            }
            if (data.hasOwnProperty('block1NotenpunkteDurchschnitt')) {
                obj['block1NotenpunkteDurchschnitt'] = ApiClient.convertToType(data['block1NotenpunkteDurchschnitt'], 'Number');
            }
            if (data.hasOwnProperty('block2NotePruefung')) {
                obj['block2NotePruefung'] = ApiClient.convertToType(data['block2NotePruefung'], 'String');
            }
            if (data.hasOwnProperty('block2PunkteZwischenstand')) {
                obj['block2PunkteZwischenstand'] = ApiClient.convertToType(data['block2PunkteZwischenstand'], 'Number');
            }
            if (data.hasOwnProperty('block2MuendlichePruefungAbweichung')) {
                obj['block2MuendlichePruefungAbweichung'] = ApiClient.convertToType(data['block2MuendlichePruefungAbweichung'], 'Boolean');
            }
            if (data.hasOwnProperty('block2MuendlichePruefungBestehen')) {
                obj['block2MuendlichePruefungBestehen'] = ApiClient.convertToType(data['block2MuendlichePruefungBestehen'], 'Boolean');
            }
            if (data.hasOwnProperty('block2MuendlichePruefungFreiwillig')) {
                obj['block2MuendlichePruefungFreiwillig'] = ApiClient.convertToType(data['block2MuendlichePruefungFreiwillig'], 'Boolean');
            }
            if (data.hasOwnProperty('block2MuendlichePruefungReihenfolge')) {
                obj['block2MuendlichePruefungReihenfolge'] = ApiClient.convertToType(data['block2MuendlichePruefungReihenfolge'], 'Number');
            }
            if (data.hasOwnProperty('block2MuendlichePruefungNote')) {
                obj['block2MuendlichePruefungNote'] = ApiClient.convertToType(data['block2MuendlichePruefungNote'], 'String');
            }
            if (data.hasOwnProperty('block2Punkte')) {
                obj['block2Punkte'] = ApiClient.convertToType(data['block2Punkte'], 'Number');
            }
            if (data.hasOwnProperty('block2Pruefer')) {
                obj['block2Pruefer'] = ApiClient.convertToType(data['block2Pruefer'], 'String');
            }
            if (data.hasOwnProperty('belegungen')) {
                obj['belegungen'] = ApiClient.convertToType(data['belegungen'], [AbiturFachbelegungHalbjahr]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/GOStFach} fach
 */
AbiturFachbelegung.prototype['fach'] = undefined;

/**
 * @member {module:model/AbiturFachbelegung.LetzteKursartEnum} letzteKursart
 */
AbiturFachbelegung.prototype['letzteKursart'] = undefined;

/**
 * @member {module:model/AbiturFachbelegung.AbiturFachEnum} abiturFach
 */
AbiturFachbelegung.prototype['abiturFach'] = undefined;

/**
 * @member {Boolean} istFSNeu
 */
AbiturFachbelegung.prototype['istFSNeu'] = undefined;

/**
 * @member {Number} block1PunktSumme
 */
AbiturFachbelegung.prototype['block1PunktSumme'] = undefined;

/**
 * @member {Number} block1NotenpunkteDurchschnitt
 */
AbiturFachbelegung.prototype['block1NotenpunkteDurchschnitt'] = undefined;

/**
 * @member {module:model/AbiturFachbelegung.Block2NotePruefungEnum} block2NotePruefung
 */
AbiturFachbelegung.prototype['block2NotePruefung'] = undefined;

/**
 * @member {Number} block2PunkteZwischenstand
 */
AbiturFachbelegung.prototype['block2PunkteZwischenstand'] = undefined;

/**
 * @member {Boolean} block2MuendlichePruefungAbweichung
 */
AbiturFachbelegung.prototype['block2MuendlichePruefungAbweichung'] = undefined;

/**
 * @member {Boolean} block2MuendlichePruefungBestehen
 */
AbiturFachbelegung.prototype['block2MuendlichePruefungBestehen'] = undefined;

/**
 * @member {Boolean} block2MuendlichePruefungFreiwillig
 */
AbiturFachbelegung.prototype['block2MuendlichePruefungFreiwillig'] = undefined;

/**
 * @member {Number} block2MuendlichePruefungReihenfolge
 */
AbiturFachbelegung.prototype['block2MuendlichePruefungReihenfolge'] = undefined;

/**
 * @member {module:model/AbiturFachbelegung.Block2MuendlichePruefungNoteEnum} block2MuendlichePruefungNote
 */
AbiturFachbelegung.prototype['block2MuendlichePruefungNote'] = undefined;

/**
 * @member {Number} block2Punkte
 */
AbiturFachbelegung.prototype['block2Punkte'] = undefined;

/**
 * @member {String} block2Pruefer
 */
AbiturFachbelegung.prototype['block2Pruefer'] = undefined;

/**
 * @member {Array.<module:model/AbiturFachbelegungHalbjahr>} belegungen
 */
AbiturFachbelegung.prototype['belegungen'] = undefined;





/**
 * Allowed values for the <code>letzteKursart</code> property.
 * @enum {String}
 * @readonly
 */
AbiturFachbelegung['LetzteKursartEnum'] = {

    /**
     * value: "LK"
     * @const
     */
    "LK": "LK",

    /**
     * value: "GK"
     * @const
     */
    "GK": "GK",

    /**
     * value: "ZK"
     * @const
     */
    "ZK": "ZK",

    /**
     * value: "PJK"
     * @const
     */
    "PJK": "PJK",

    /**
     * value: "VTF"
     * @const
     */
    "VTF": "VTF"
};


/**
 * Allowed values for the <code>abiturFach</code> property.
 * @enum {String}
 * @readonly
 */
AbiturFachbelegung['AbiturFachEnum'] = {

    /**
     * value: "LK1"
     * @const
     */
    "LK1": "LK1",

    /**
     * value: "LK2"
     * @const
     */
    "LK2": "LK2",

    /**
     * value: "AB3"
     * @const
     */
    "AB3": "AB3",

    /**
     * value: "AB4"
     * @const
     */
    "AB4": "AB4"
};


/**
 * Allowed values for the <code>block2NotePruefung</code> property.
 * @enum {String}
 * @readonly
 */
AbiturFachbelegung['Block2NotePruefungEnum'] = {

    /**
     * value: "1P"
     * @const
     */
    "1P": "1P",

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "1M"
     * @const
     */
    "1M": "1M",

    /**
     * value: "2P"
     * @const
     */
    "2P": "2P",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "2M"
     * @const
     */
    "2M": "2M",

    /**
     * value: "3P"
     * @const
     */
    "3P": "3P",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "3M"
     * @const
     */
    "3M": "3M",

    /**
     * value: "4P"
     * @const
     */
    "4P": "4P",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "4M"
     * @const
     */
    "4M": "4M",

    /**
     * value: "5P"
     * @const
     */
    "5P": "5P",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "5M"
     * @const
     */
    "5M": "5M",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "E1"
     * @const
     */
    "E1": "E1",

    /**
     * value: "E2"
     * @const
     */
    "E2": "E2",

    /**
     * value: "E3"
     * @const
     */
    "E3": "E3",

    /**
     * value: "AT"
     * @const
     */
    "AT": "AT",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",

    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",

    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",

    /**
     * value: "LM"
     * @const
     */
    "LM": "LM",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};


/**
 * Allowed values for the <code>block2MuendlichePruefungNote</code> property.
 * @enum {String}
 * @readonly
 */
AbiturFachbelegung['Block2MuendlichePruefungNoteEnum'] = {

    /**
     * value: "1P"
     * @const
     */
    "1P": "1P",

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "1M"
     * @const
     */
    "1M": "1M",

    /**
     * value: "2P"
     * @const
     */
    "2P": "2P",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "2M"
     * @const
     */
    "2M": "2M",

    /**
     * value: "3P"
     * @const
     */
    "3P": "3P",

    /**
     * value: "3"
     * @const
     */
    "3": "3",

    /**
     * value: "3M"
     * @const
     */
    "3M": "3M",

    /**
     * value: "4P"
     * @const
     */
    "4P": "4P",

    /**
     * value: "4"
     * @const
     */
    "4": "4",

    /**
     * value: "4M"
     * @const
     */
    "4M": "4M",

    /**
     * value: "5P"
     * @const
     */
    "5P": "5P",

    /**
     * value: "5"
     * @const
     */
    "5": "5",

    /**
     * value: "5M"
     * @const
     */
    "5M": "5M",

    /**
     * value: "6"
     * @const
     */
    "6": "6",

    /**
     * value: "E1"
     * @const
     */
    "E1": "E1",

    /**
     * value: "E2"
     * @const
     */
    "E2": "E2",

    /**
     * value: "E3"
     * @const
     */
    "E3": "E3",

    /**
     * value: "AT"
     * @const
     */
    "AT": "AT",

    /**
     * value: "AM"
     * @const
     */
    "AM": "AM",

    /**
     * value: "NB"
     * @const
     */
    "NB": "NB",

    /**
     * value: "NT"
     * @const
     */
    "NT": "NT",

    /**
     * value: "NE"
     * @const
     */
    "NE": "NE",

    /**
     * value: "LM"
     * @const
     */
    "LM": "LM",

    /**
     * value: ""
     * @const
     */
    "empty": ""
};



export default AbiturFachbelegung;

